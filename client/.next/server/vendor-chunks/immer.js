"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/immer";
exports.ids = ["vendor-chunks/immer"];
exports.modules = {

/***/ "(ssr)/../node_modules/immer/dist/immer.mjs":
/*!********************************************!*\
  !*** ../node_modules/immer/dist/immer.mjs ***!
  \********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Immer: () => (/* binding */ Immer2),\n/* harmony export */   applyPatches: () => (/* binding */ applyPatches),\n/* harmony export */   castDraft: () => (/* binding */ castDraft),\n/* harmony export */   castImmutable: () => (/* binding */ castImmutable),\n/* harmony export */   createDraft: () => (/* binding */ createDraft),\n/* harmony export */   current: () => (/* binding */ current),\n/* harmony export */   enableMapSet: () => (/* binding */ enableMapSet),\n/* harmony export */   enablePatches: () => (/* binding */ enablePatches),\n/* harmony export */   finishDraft: () => (/* binding */ finishDraft),\n/* harmony export */   freeze: () => (/* binding */ freeze),\n/* harmony export */   immerable: () => (/* binding */ DRAFTABLE),\n/* harmony export */   isDraft: () => (/* binding */ isDraft),\n/* harmony export */   isDraftable: () => (/* binding */ isDraftable),\n/* harmony export */   nothing: () => (/* binding */ NOTHING),\n/* harmony export */   original: () => (/* binding */ original),\n/* harmony export */   produce: () => (/* binding */ produce),\n/* harmony export */   produceWithPatches: () => (/* binding */ produceWithPatches),\n/* harmony export */   setAutoFreeze: () => (/* binding */ setAutoFreeze),\n/* harmony export */   setUseStrictShallowCopy: () => (/* binding */ setUseStrictShallowCopy)\n/* harmony export */ });\n// src/utils/env.ts\nvar NOTHING = Symbol.for(\"immer-nothing\");\nvar DRAFTABLE = Symbol.for(\"immer-draftable\");\nvar DRAFT_STATE = Symbol.for(\"immer-state\");\n// src/utils/errors.ts\nvar errors =  true ? [\n    // All error codes, starting by 0:\n    function(plugin) {\n        return `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`;\n    },\n    function(thing) {\n        return `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`;\n    },\n    \"This object has been frozen and should not be mutated\",\n    function(data) {\n        return \"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" + data;\n    },\n    \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n    \"Immer forbids circular references\",\n    \"The first or second argument to `produce` must be a function\",\n    \"The third argument to `produce` must be a function or undefined\",\n    \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n    \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n    function(thing) {\n        return `'current' expects a draft, got: ${thing}`;\n    },\n    \"Object.defineProperty() cannot be used on an Immer draft\",\n    \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n    \"Immer only supports deleting array indices\",\n    \"Immer only supports setting array indices and the 'length' property\",\n    function(thing) {\n        return `'original' expects a draft, got: ${thing}`;\n    }\n] : 0;\nfunction die(error, ...args) {\n    if (true) {\n        const e = errors[error];\n        const msg = typeof e === \"function\" ? e.apply(null, args) : e;\n        throw new Error(`[Immer] ${msg}`);\n    }\n    throw new Error(`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`);\n}\n// src/utils/common.ts\nvar getPrototypeOf = Object.getPrototypeOf;\nfunction isDraft(value) {\n    return !!value && !!value[DRAFT_STATE];\n}\nfunction isDraftable(value) {\n    if (!value) return false;\n    return isPlainObject(value) || Array.isArray(value) || !!value[DRAFTABLE] || !!value.constructor?.[DRAFTABLE] || isMap(value) || isSet(value);\n}\nvar objectCtorString = Object.prototype.constructor.toString();\nfunction isPlainObject(value) {\n    if (!value || typeof value !== \"object\") return false;\n    const proto = getPrototypeOf(value);\n    if (proto === null) {\n        return true;\n    }\n    const Ctor = Object.hasOwnProperty.call(proto, \"constructor\") && proto.constructor;\n    if (Ctor === Object) return true;\n    return typeof Ctor == \"function\" && Function.toString.call(Ctor) === objectCtorString;\n}\nfunction original(value) {\n    if (!isDraft(value)) die(15, value);\n    return value[DRAFT_STATE].base_;\n}\nfunction each(obj, iter) {\n    if (getArchtype(obj) === 0 /* Object */ ) {\n        Reflect.ownKeys(obj).forEach((key)=>{\n            iter(key, obj[key], obj);\n        });\n    } else {\n        obj.forEach((entry, index)=>iter(index, entry, obj));\n    }\n}\nfunction getArchtype(thing) {\n    const state = thing[DRAFT_STATE];\n    return state ? state.type_ : Array.isArray(thing) ? 1 /* Array */  : isMap(thing) ? 2 /* Map */  : isSet(thing) ? 3 /* Set */  : 0 /* Object */ ;\n}\nfunction has(thing, prop) {\n    return getArchtype(thing) === 2 /* Map */  ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);\n}\nfunction get(thing, prop) {\n    return getArchtype(thing) === 2 /* Map */  ? thing.get(prop) : thing[prop];\n}\nfunction set(thing, propOrOldValue, value) {\n    const t = getArchtype(thing);\n    if (t === 2 /* Map */ ) thing.set(propOrOldValue, value);\n    else if (t === 3 /* Set */ ) {\n        thing.add(value);\n    } else thing[propOrOldValue] = value;\n}\nfunction is(x, y) {\n    if (x === y) {\n        return x !== 0 || 1 / x === 1 / y;\n    } else {\n        return x !== x && y !== y;\n    }\n}\nfunction isMap(target) {\n    return target instanceof Map;\n}\nfunction isSet(target) {\n    return target instanceof Set;\n}\nfunction latest(state) {\n    return state.copy_ || state.base_;\n}\nfunction shallowCopy(base, strict) {\n    if (isMap(base)) {\n        return new Map(base);\n    }\n    if (isSet(base)) {\n        return new Set(base);\n    }\n    if (Array.isArray(base)) return Array.prototype.slice.call(base);\n    const isPlain = isPlainObject(base);\n    if (strict === true || strict === \"class_only\" && !isPlain) {\n        const descriptors = Object.getOwnPropertyDescriptors(base);\n        delete descriptors[DRAFT_STATE];\n        let keys = Reflect.ownKeys(descriptors);\n        for(let i = 0; i < keys.length; i++){\n            const key = keys[i];\n            const desc = descriptors[key];\n            if (desc.writable === false) {\n                desc.writable = true;\n                desc.configurable = true;\n            }\n            if (desc.get || desc.set) descriptors[key] = {\n                configurable: true,\n                writable: true,\n                // could live with !!desc.set as well here...\n                enumerable: desc.enumerable,\n                value: base[key]\n            };\n        }\n        return Object.create(getPrototypeOf(base), descriptors);\n    } else {\n        const proto = getPrototypeOf(base);\n        if (proto !== null && isPlain) {\n            return {\n                ...base\n            };\n        }\n        const obj = Object.create(proto);\n        return Object.assign(obj, base);\n    }\n}\nfunction freeze(obj, deep = false) {\n    if (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj;\n    if (getArchtype(obj) > 1) {\n        obj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;\n    }\n    Object.freeze(obj);\n    if (deep) Object.entries(obj).forEach(([key, value])=>freeze(value, true));\n    return obj;\n}\nfunction dontMutateFrozenCollections() {\n    die(2);\n}\nfunction isFrozen(obj) {\n    return Object.isFrozen(obj);\n}\n// src/utils/plugins.ts\nvar plugins = {};\nfunction getPlugin(pluginKey) {\n    const plugin = plugins[pluginKey];\n    if (!plugin) {\n        die(0, pluginKey);\n    }\n    return plugin;\n}\nfunction loadPlugin(pluginKey, implementation) {\n    if (!plugins[pluginKey]) plugins[pluginKey] = implementation;\n}\n// src/core/scope.ts\nvar currentScope;\nfunction getCurrentScope() {\n    return currentScope;\n}\nfunction createScope(parent_, immer_) {\n    return {\n        drafts_: [],\n        parent_,\n        immer_,\n        // Whenever the modified draft contains a draft from another scope, we\n        // need to prevent auto-freezing so the unowned draft can be finalized.\n        canAutoFreeze_: true,\n        unfinalizedDrafts_: 0\n    };\n}\nfunction usePatchesInScope(scope, patchListener) {\n    if (patchListener) {\n        getPlugin(\"Patches\");\n        scope.patches_ = [];\n        scope.inversePatches_ = [];\n        scope.patchListener_ = patchListener;\n    }\n}\nfunction revokeScope(scope) {\n    leaveScope(scope);\n    scope.drafts_.forEach(revokeDraft);\n    scope.drafts_ = null;\n}\nfunction leaveScope(scope) {\n    if (scope === currentScope) {\n        currentScope = scope.parent_;\n    }\n}\nfunction enterScope(immer2) {\n    return currentScope = createScope(currentScope, immer2);\n}\nfunction revokeDraft(draft) {\n    const state = draft[DRAFT_STATE];\n    if (state.type_ === 0 /* Object */  || state.type_ === 1 /* Array */ ) state.revoke_();\n    else state.revoked_ = true;\n}\n// src/core/finalize.ts\nfunction processResult(result, scope) {\n    scope.unfinalizedDrafts_ = scope.drafts_.length;\n    const baseDraft = scope.drafts_[0];\n    const isReplaced = result !== void 0 && result !== baseDraft;\n    if (isReplaced) {\n        if (baseDraft[DRAFT_STATE].modified_) {\n            revokeScope(scope);\n            die(4);\n        }\n        if (isDraftable(result)) {\n            result = finalize(scope, result);\n            if (!scope.parent_) maybeFreeze(scope, result);\n        }\n        if (scope.patches_) {\n            getPlugin(\"Patches\").generateReplacementPatches_(baseDraft[DRAFT_STATE].base_, result, scope.patches_, scope.inversePatches_);\n        }\n    } else {\n        result = finalize(scope, baseDraft, []);\n    }\n    revokeScope(scope);\n    if (scope.patches_) {\n        scope.patchListener_(scope.patches_, scope.inversePatches_);\n    }\n    return result !== NOTHING ? result : void 0;\n}\nfunction finalize(rootScope, value, path) {\n    if (isFrozen(value)) return value;\n    const state = value[DRAFT_STATE];\n    if (!state) {\n        each(value, (key, childValue)=>finalizeProperty(rootScope, state, value, key, childValue, path));\n        return value;\n    }\n    if (state.scope_ !== rootScope) return value;\n    if (!state.modified_) {\n        maybeFreeze(rootScope, state.base_, true);\n        return state.base_;\n    }\n    if (!state.finalized_) {\n        state.finalized_ = true;\n        state.scope_.unfinalizedDrafts_--;\n        const result = state.copy_;\n        let resultEach = result;\n        let isSet2 = false;\n        if (state.type_ === 3 /* Set */ ) {\n            resultEach = new Set(result);\n            result.clear();\n            isSet2 = true;\n        }\n        each(resultEach, (key, childValue)=>finalizeProperty(rootScope, state, result, key, childValue, path, isSet2));\n        maybeFreeze(rootScope, result, false);\n        if (path && rootScope.patches_) {\n            getPlugin(\"Patches\").generatePatches_(state, path, rootScope.patches_, rootScope.inversePatches_);\n        }\n    }\n    return state.copy_;\n}\nfunction finalizeProperty(rootScope, parentState, targetObject, prop, childValue, rootPath, targetIsSet) {\n    if ( true && childValue === targetObject) die(5);\n    if (isDraft(childValue)) {\n        const path = rootPath && parentState && parentState.type_ !== 3 /* Set */  && // Set objects are atomic since they have no keys.\n        !has(parentState.assigned_, prop) ? rootPath.concat(prop) : void 0;\n        const res = finalize(rootScope, childValue, path);\n        set(targetObject, prop, res);\n        if (isDraft(res)) {\n            rootScope.canAutoFreeze_ = false;\n        } else return;\n    } else if (targetIsSet) {\n        targetObject.add(childValue);\n    }\n    if (isDraftable(childValue) && !isFrozen(childValue)) {\n        if (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n            return;\n        }\n        finalize(rootScope, childValue);\n        if ((!parentState || !parentState.scope_.parent_) && typeof prop !== \"symbol\" && Object.prototype.propertyIsEnumerable.call(targetObject, prop)) maybeFreeze(rootScope, childValue);\n    }\n}\nfunction maybeFreeze(scope, value, deep = false) {\n    if (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n        freeze(value, deep);\n    }\n}\n// src/core/proxy.ts\nfunction createProxyProxy(base, parent) {\n    const isArray = Array.isArray(base);\n    const state = {\n        type_: isArray ? 1 /* Array */  : 0 /* Object */ ,\n        // Track which produce call this is associated with.\n        scope_: parent ? parent.scope_ : getCurrentScope(),\n        // True for both shallow and deep changes.\n        modified_: false,\n        // Used during finalization.\n        finalized_: false,\n        // Track which properties have been assigned (true) or deleted (false).\n        assigned_: {},\n        // The parent draft state.\n        parent_: parent,\n        // The base state.\n        base_: base,\n        // The base proxy.\n        draft_: null,\n        // set below\n        // The base copy with any updated values.\n        copy_: null,\n        // Called by the `produce` function.\n        revoke_: null,\n        isManual_: false\n    };\n    let target = state;\n    let traps = objectTraps;\n    if (isArray) {\n        target = [\n            state\n        ];\n        traps = arrayTraps;\n    }\n    const { revoke, proxy } = Proxy.revocable(target, traps);\n    state.draft_ = proxy;\n    state.revoke_ = revoke;\n    return proxy;\n}\nvar objectTraps = {\n    get (state, prop) {\n        if (prop === DRAFT_STATE) return state;\n        const source = latest(state);\n        if (!has(source, prop)) {\n            return readPropFromProto(state, source, prop);\n        }\n        const value = source[prop];\n        if (state.finalized_ || !isDraftable(value)) {\n            return value;\n        }\n        if (value === peek(state.base_, prop)) {\n            prepareCopy(state);\n            return state.copy_[prop] = createProxy(value, state);\n        }\n        return value;\n    },\n    has (state, prop) {\n        return prop in latest(state);\n    },\n    ownKeys (state) {\n        return Reflect.ownKeys(latest(state));\n    },\n    set (state, prop, value) {\n        const desc = getDescriptorFromProto(latest(state), prop);\n        if (desc?.set) {\n            desc.set.call(state.draft_, value);\n            return true;\n        }\n        if (!state.modified_) {\n            const current2 = peek(latest(state), prop);\n            const currentState = current2?.[DRAFT_STATE];\n            if (currentState && currentState.base_ === value) {\n                state.copy_[prop] = value;\n                state.assigned_[prop] = false;\n                return true;\n            }\n            if (is(value, current2) && (value !== void 0 || has(state.base_, prop))) return true;\n            prepareCopy(state);\n            markChanged(state);\n        }\n        if (state.copy_[prop] === value && // special case: handle new props with value 'undefined'\n        (value !== void 0 || prop in state.copy_) || // special case: NaN\n        Number.isNaN(value) && Number.isNaN(state.copy_[prop])) return true;\n        state.copy_[prop] = value;\n        state.assigned_[prop] = true;\n        return true;\n    },\n    deleteProperty (state, prop) {\n        if (peek(state.base_, prop) !== void 0 || prop in state.base_) {\n            state.assigned_[prop] = false;\n            prepareCopy(state);\n            markChanged(state);\n        } else {\n            delete state.assigned_[prop];\n        }\n        if (state.copy_) {\n            delete state.copy_[prop];\n        }\n        return true;\n    },\n    // Note: We never coerce `desc.value` into an Immer draft, because we can't make\n    // the same guarantee in ES5 mode.\n    getOwnPropertyDescriptor (state, prop) {\n        const owner = latest(state);\n        const desc = Reflect.getOwnPropertyDescriptor(owner, prop);\n        if (!desc) return desc;\n        return {\n            writable: true,\n            configurable: state.type_ !== 1 /* Array */  || prop !== \"length\",\n            enumerable: desc.enumerable,\n            value: owner[prop]\n        };\n    },\n    defineProperty () {\n        die(11);\n    },\n    getPrototypeOf (state) {\n        return getPrototypeOf(state.base_);\n    },\n    setPrototypeOf () {\n        die(12);\n    }\n};\nvar arrayTraps = {};\neach(objectTraps, (key, fn)=>{\n    arrayTraps[key] = function() {\n        arguments[0] = arguments[0][0];\n        return fn.apply(this, arguments);\n    };\n});\narrayTraps.deleteProperty = function(state, prop) {\n    if ( true && isNaN(parseInt(prop))) die(13);\n    return arrayTraps.set.call(this, state, prop, void 0);\n};\narrayTraps.set = function(state, prop, value) {\n    if ( true && prop !== \"length\" && isNaN(parseInt(prop))) die(14);\n    return objectTraps.set.call(this, state[0], prop, value, state[0]);\n};\nfunction peek(draft, prop) {\n    const state = draft[DRAFT_STATE];\n    const source = state ? latest(state) : draft;\n    return source[prop];\n}\nfunction readPropFromProto(state, source, prop) {\n    const desc = getDescriptorFromProto(source, prop);\n    return desc ? `value` in desc ? desc.value : (// This is a very special case, if the prop is a getter defined by the\n    // prototype, we should invoke it with the draft as context!\n    desc.get?.call(state.draft_)) : void 0;\n}\nfunction getDescriptorFromProto(source, prop) {\n    if (!(prop in source)) return void 0;\n    let proto = getPrototypeOf(source);\n    while(proto){\n        const desc = Object.getOwnPropertyDescriptor(proto, prop);\n        if (desc) return desc;\n        proto = getPrototypeOf(proto);\n    }\n    return void 0;\n}\nfunction markChanged(state) {\n    if (!state.modified_) {\n        state.modified_ = true;\n        if (state.parent_) {\n            markChanged(state.parent_);\n        }\n    }\n}\nfunction prepareCopy(state) {\n    if (!state.copy_) {\n        state.copy_ = shallowCopy(state.base_, state.scope_.immer_.useStrictShallowCopy_);\n    }\n}\n// src/core/immerClass.ts\nvar Immer2 = class {\n    constructor(config){\n        this.autoFreeze_ = true;\n        this.useStrictShallowCopy_ = false;\n        /**\n     * The `produce` function takes a value and a \"recipe function\" (whose\n     * return value often depends on the base state). The recipe function is\n     * free to mutate its first argument however it wants. All mutations are\n     * only ever applied to a __copy__ of the base state.\n     *\n     * Pass only a function to create a \"curried producer\" which relieves you\n     * from passing the recipe function every time.\n     *\n     * Only plain objects and arrays are made mutable. All other objects are\n     * considered uncopyable.\n     *\n     * Note: This function is __bound__ to its `Immer` instance.\n     *\n     * @param {any} base - the initial state\n     * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n     * @param {Function} patchListener - optional function that will be called with all the patches produced here\n     * @returns {any} a new state, or the initial state if nothing was modified\n     */ this.produce = (base, recipe, patchListener)=>{\n            if (typeof base === \"function\" && typeof recipe !== \"function\") {\n                const defaultBase = recipe;\n                recipe = base;\n                const self = this;\n                return function curriedProduce(base2 = defaultBase, ...args) {\n                    return self.produce(base2, (draft)=>recipe.call(this, draft, ...args));\n                };\n            }\n            if (typeof recipe !== \"function\") die(6);\n            if (patchListener !== void 0 && typeof patchListener !== \"function\") die(7);\n            let result;\n            if (isDraftable(base)) {\n                const scope = enterScope(this);\n                const proxy = createProxy(base, void 0);\n                let hasError = true;\n                try {\n                    result = recipe(proxy);\n                    hasError = false;\n                } finally{\n                    if (hasError) revokeScope(scope);\n                    else leaveScope(scope);\n                }\n                usePatchesInScope(scope, patchListener);\n                return processResult(result, scope);\n            } else if (!base || typeof base !== \"object\") {\n                result = recipe(base);\n                if (result === void 0) result = base;\n                if (result === NOTHING) result = void 0;\n                if (this.autoFreeze_) freeze(result, true);\n                if (patchListener) {\n                    const p = [];\n                    const ip = [];\n                    getPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip);\n                    patchListener(p, ip);\n                }\n                return result;\n            } else die(1, base);\n        };\n        this.produceWithPatches = (base, recipe)=>{\n            if (typeof base === \"function\") {\n                return (state, ...args)=>this.produceWithPatches(state, (draft)=>base(draft, ...args));\n            }\n            let patches, inversePatches;\n            const result = this.produce(base, recipe, (p, ip)=>{\n                patches = p;\n                inversePatches = ip;\n            });\n            return [\n                result,\n                patches,\n                inversePatches\n            ];\n        };\n        if (typeof config?.autoFreeze === \"boolean\") this.setAutoFreeze(config.autoFreeze);\n        if (typeof config?.useStrictShallowCopy === \"boolean\") this.setUseStrictShallowCopy(config.useStrictShallowCopy);\n    }\n    createDraft(base) {\n        if (!isDraftable(base)) die(8);\n        if (isDraft(base)) base = current(base);\n        const scope = enterScope(this);\n        const proxy = createProxy(base, void 0);\n        proxy[DRAFT_STATE].isManual_ = true;\n        leaveScope(scope);\n        return proxy;\n    }\n    finishDraft(draft, patchListener) {\n        const state = draft && draft[DRAFT_STATE];\n        if (!state || !state.isManual_) die(9);\n        const { scope_: scope } = state;\n        usePatchesInScope(scope, patchListener);\n        return processResult(void 0, scope);\n    }\n    /**\n   * Pass true to automatically freeze all copies created by Immer.\n   *\n   * By default, auto-freezing is enabled.\n   */ setAutoFreeze(value) {\n        this.autoFreeze_ = value;\n    }\n    /**\n   * Pass true to enable strict shallow copy.\n   *\n   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n   */ setUseStrictShallowCopy(value) {\n        this.useStrictShallowCopy_ = value;\n    }\n    applyPatches(base, patches) {\n        let i;\n        for(i = patches.length - 1; i >= 0; i--){\n            const patch = patches[i];\n            if (patch.path.length === 0 && patch.op === \"replace\") {\n                base = patch.value;\n                break;\n            }\n        }\n        if (i > -1) {\n            patches = patches.slice(i + 1);\n        }\n        const applyPatchesImpl = getPlugin(\"Patches\").applyPatches_;\n        if (isDraft(base)) {\n            return applyPatchesImpl(base, patches);\n        }\n        return this.produce(base, (draft)=>applyPatchesImpl(draft, patches));\n    }\n};\nfunction createProxy(value, parent) {\n    const draft = isMap(value) ? getPlugin(\"MapSet\").proxyMap_(value, parent) : isSet(value) ? getPlugin(\"MapSet\").proxySet_(value, parent) : createProxyProxy(value, parent);\n    const scope = parent ? parent.scope_ : getCurrentScope();\n    scope.drafts_.push(draft);\n    return draft;\n}\n// src/core/current.ts\nfunction current(value) {\n    if (!isDraft(value)) die(10, value);\n    return currentImpl(value);\n}\nfunction currentImpl(value) {\n    if (!isDraftable(value) || isFrozen(value)) return value;\n    const state = value[DRAFT_STATE];\n    let copy;\n    if (state) {\n        if (!state.modified_) return state.base_;\n        state.finalized_ = true;\n        copy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_);\n    } else {\n        copy = shallowCopy(value, true);\n    }\n    each(copy, (key, childValue)=>{\n        set(copy, key, currentImpl(childValue));\n    });\n    if (state) {\n        state.finalized_ = false;\n    }\n    return copy;\n}\n// src/plugins/patches.ts\nfunction enablePatches() {\n    const errorOffset = 16;\n    if (true) {\n        errors.push('Sets cannot have \"replace\" patches.', function(op) {\n            return \"Unsupported patch operation: \" + op;\n        }, function(path) {\n            return \"Cannot apply patch, path doesn't resolve: \" + path;\n        }, \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\");\n    }\n    const REPLACE = \"replace\";\n    const ADD = \"add\";\n    const REMOVE = \"remove\";\n    function generatePatches_(state, basePath, patches, inversePatches) {\n        switch(state.type_){\n            case 0 /* Object */ :\n            case 2 /* Map */ :\n                return generatePatchesFromAssigned(state, basePath, patches, inversePatches);\n            case 1 /* Array */ :\n                return generateArrayPatches(state, basePath, patches, inversePatches);\n            case 3 /* Set */ :\n                return generateSetPatches(state, basePath, patches, inversePatches);\n        }\n    }\n    function generateArrayPatches(state, basePath, patches, inversePatches) {\n        let { base_, assigned_ } = state;\n        let copy_ = state.copy_;\n        if (copy_.length < base_.length) {\n            ;\n            [base_, copy_] = [\n                copy_,\n                base_\n            ];\n            [patches, inversePatches] = [\n                inversePatches,\n                patches\n            ];\n        }\n        for(let i = 0; i < base_.length; i++){\n            if (assigned_[i] && copy_[i] !== base_[i]) {\n                const path = basePath.concat([\n                    i\n                ]);\n                patches.push({\n                    op: REPLACE,\n                    path,\n                    // Need to maybe clone it, as it can in fact be the original value\n                    // due to the base/copy inversion at the start of this function\n                    value: clonePatchValueIfNeeded(copy_[i])\n                });\n                inversePatches.push({\n                    op: REPLACE,\n                    path,\n                    value: clonePatchValueIfNeeded(base_[i])\n                });\n            }\n        }\n        for(let i = base_.length; i < copy_.length; i++){\n            const path = basePath.concat([\n                i\n            ]);\n            patches.push({\n                op: ADD,\n                path,\n                // Need to maybe clone it, as it can in fact be the original value\n                // due to the base/copy inversion at the start of this function\n                value: clonePatchValueIfNeeded(copy_[i])\n            });\n        }\n        for(let i = copy_.length - 1; base_.length <= i; --i){\n            const path = basePath.concat([\n                i\n            ]);\n            inversePatches.push({\n                op: REMOVE,\n                path\n            });\n        }\n    }\n    function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {\n        const { base_, copy_ } = state;\n        each(state.assigned_, (key, assignedValue)=>{\n            const origValue = get(base_, key);\n            const value = get(copy_, key);\n            const op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD;\n            if (origValue === value && op === REPLACE) return;\n            const path = basePath.concat(key);\n            patches.push(op === REMOVE ? {\n                op,\n                path\n            } : {\n                op,\n                path,\n                value\n            });\n            inversePatches.push(op === ADD ? {\n                op: REMOVE,\n                path\n            } : op === REMOVE ? {\n                op: ADD,\n                path,\n                value: clonePatchValueIfNeeded(origValue)\n            } : {\n                op: REPLACE,\n                path,\n                value: clonePatchValueIfNeeded(origValue)\n            });\n        });\n    }\n    function generateSetPatches(state, basePath, patches, inversePatches) {\n        let { base_, copy_ } = state;\n        let i = 0;\n        base_.forEach((value)=>{\n            if (!copy_.has(value)) {\n                const path = basePath.concat([\n                    i\n                ]);\n                patches.push({\n                    op: REMOVE,\n                    path,\n                    value\n                });\n                inversePatches.unshift({\n                    op: ADD,\n                    path,\n                    value\n                });\n            }\n            i++;\n        });\n        i = 0;\n        copy_.forEach((value)=>{\n            if (!base_.has(value)) {\n                const path = basePath.concat([\n                    i\n                ]);\n                patches.push({\n                    op: ADD,\n                    path,\n                    value\n                });\n                inversePatches.unshift({\n                    op: REMOVE,\n                    path,\n                    value\n                });\n            }\n            i++;\n        });\n    }\n    function generateReplacementPatches_(baseValue, replacement, patches, inversePatches) {\n        patches.push({\n            op: REPLACE,\n            path: [],\n            value: replacement === NOTHING ? void 0 : replacement\n        });\n        inversePatches.push({\n            op: REPLACE,\n            path: [],\n            value: baseValue\n        });\n    }\n    function applyPatches_(draft, patches) {\n        patches.forEach((patch)=>{\n            const { path, op } = patch;\n            let base = draft;\n            for(let i = 0; i < path.length - 1; i++){\n                const parentType = getArchtype(base);\n                let p = path[i];\n                if (typeof p !== \"string\" && typeof p !== \"number\") {\n                    p = \"\" + p;\n                }\n                if ((parentType === 0 /* Object */  || parentType === 1 /* Array */ ) && (p === \"__proto__\" || p === \"constructor\")) die(errorOffset + 3);\n                if (typeof base === \"function\" && p === \"prototype\") die(errorOffset + 3);\n                base = get(base, p);\n                if (typeof base !== \"object\") die(errorOffset + 2, path.join(\"/\"));\n            }\n            const type = getArchtype(base);\n            const value = deepClonePatchValue(patch.value);\n            const key = path[path.length - 1];\n            switch(op){\n                case REPLACE:\n                    switch(type){\n                        case 2 /* Map */ :\n                            return base.set(key, value);\n                        case 3 /* Set */ :\n                            die(errorOffset);\n                        default:\n                            return base[key] = value;\n                    }\n                case ADD:\n                    switch(type){\n                        case 1 /* Array */ :\n                            return key === \"-\" ? base.push(value) : base.splice(key, 0, value);\n                        case 2 /* Map */ :\n                            return base.set(key, value);\n                        case 3 /* Set */ :\n                            return base.add(value);\n                        default:\n                            return base[key] = value;\n                    }\n                case REMOVE:\n                    switch(type){\n                        case 1 /* Array */ :\n                            return base.splice(key, 1);\n                        case 2 /* Map */ :\n                            return base.delete(key);\n                        case 3 /* Set */ :\n                            return base.delete(patch.value);\n                        default:\n                            return delete base[key];\n                    }\n                default:\n                    die(errorOffset + 1, op);\n            }\n        });\n        return draft;\n    }\n    function deepClonePatchValue(obj) {\n        if (!isDraftable(obj)) return obj;\n        if (Array.isArray(obj)) return obj.map(deepClonePatchValue);\n        if (isMap(obj)) return new Map(Array.from(obj.entries()).map(([k, v])=>[\n                k,\n                deepClonePatchValue(v)\n            ]));\n        if (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue));\n        const cloned = Object.create(getPrototypeOf(obj));\n        for(const key in obj)cloned[key] = deepClonePatchValue(obj[key]);\n        if (has(obj, DRAFTABLE)) cloned[DRAFTABLE] = obj[DRAFTABLE];\n        return cloned;\n    }\n    function clonePatchValueIfNeeded(obj) {\n        if (isDraft(obj)) {\n            return deepClonePatchValue(obj);\n        } else return obj;\n    }\n    loadPlugin(\"Patches\", {\n        applyPatches_,\n        generatePatches_,\n        generateReplacementPatches_\n    });\n}\n// src/plugins/mapset.ts\nfunction enableMapSet() {\n    class DraftMap extends Map {\n        constructor(target, parent){\n            super();\n            this[DRAFT_STATE] = {\n                type_: 2 /* Map */ ,\n                parent_: parent,\n                scope_: parent ? parent.scope_ : getCurrentScope(),\n                modified_: false,\n                finalized_: false,\n                copy_: void 0,\n                assigned_: void 0,\n                base_: target,\n                draft_: this,\n                isManual_: false,\n                revoked_: false\n            };\n        }\n        get size() {\n            return latest(this[DRAFT_STATE]).size;\n        }\n        has(key) {\n            return latest(this[DRAFT_STATE]).has(key);\n        }\n        set(key, value) {\n            const state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            if (!latest(state).has(key) || latest(state).get(key) !== value) {\n                prepareMapCopy(state);\n                markChanged(state);\n                state.assigned_.set(key, true);\n                state.copy_.set(key, value);\n                state.assigned_.set(key, true);\n            }\n            return this;\n        }\n        delete(key) {\n            if (!this.has(key)) {\n                return false;\n            }\n            const state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            prepareMapCopy(state);\n            markChanged(state);\n            if (state.base_.has(key)) {\n                state.assigned_.set(key, false);\n            } else {\n                state.assigned_.delete(key);\n            }\n            state.copy_.delete(key);\n            return true;\n        }\n        clear() {\n            const state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            if (latest(state).size) {\n                prepareMapCopy(state);\n                markChanged(state);\n                state.assigned_ = /* @__PURE__ */ new Map();\n                each(state.base_, (key)=>{\n                    state.assigned_.set(key, false);\n                });\n                state.copy_.clear();\n            }\n        }\n        forEach(cb, thisArg) {\n            const state = this[DRAFT_STATE];\n            latest(state).forEach((_value, key, _map)=>{\n                cb.call(thisArg, this.get(key), key, this);\n            });\n        }\n        get(key) {\n            const state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            const value = latest(state).get(key);\n            if (state.finalized_ || !isDraftable(value)) {\n                return value;\n            }\n            if (value !== state.base_.get(key)) {\n                return value;\n            }\n            const draft = createProxy(value, state);\n            prepareMapCopy(state);\n            state.copy_.set(key, draft);\n            return draft;\n        }\n        keys() {\n            return latest(this[DRAFT_STATE]).keys();\n        }\n        values() {\n            const iterator = this.keys();\n            return {\n                [Symbol.iterator]: ()=>this.values(),\n                next: ()=>{\n                    const r = iterator.next();\n                    if (r.done) return r;\n                    const value = this.get(r.value);\n                    return {\n                        done: false,\n                        value\n                    };\n                }\n            };\n        }\n        entries() {\n            const iterator = this.keys();\n            return {\n                [Symbol.iterator]: ()=>this.entries(),\n                next: ()=>{\n                    const r = iterator.next();\n                    if (r.done) return r;\n                    const value = this.get(r.value);\n                    return {\n                        done: false,\n                        value: [\n                            r.value,\n                            value\n                        ]\n                    };\n                }\n            };\n        }\n        [(DRAFT_STATE, Symbol.iterator)]() {\n            return this.entries();\n        }\n    }\n    function proxyMap_(target, parent) {\n        return new DraftMap(target, parent);\n    }\n    function prepareMapCopy(state) {\n        if (!state.copy_) {\n            state.assigned_ = /* @__PURE__ */ new Map();\n            state.copy_ = new Map(state.base_);\n        }\n    }\n    class DraftSet extends Set {\n        constructor(target, parent){\n            super();\n            this[DRAFT_STATE] = {\n                type_: 3 /* Set */ ,\n                parent_: parent,\n                scope_: parent ? parent.scope_ : getCurrentScope(),\n                modified_: false,\n                finalized_: false,\n                copy_: void 0,\n                base_: target,\n                draft_: this,\n                drafts_: /* @__PURE__ */ new Map(),\n                revoked_: false,\n                isManual_: false\n            };\n        }\n        get size() {\n            return latest(this[DRAFT_STATE]).size;\n        }\n        has(value) {\n            const state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            if (!state.copy_) {\n                return state.base_.has(value);\n            }\n            if (state.copy_.has(value)) return true;\n            if (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value))) return true;\n            return false;\n        }\n        add(value) {\n            const state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            if (!this.has(value)) {\n                prepareSetCopy(state);\n                markChanged(state);\n                state.copy_.add(value);\n            }\n            return this;\n        }\n        delete(value) {\n            if (!this.has(value)) {\n                return false;\n            }\n            const state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            prepareSetCopy(state);\n            markChanged(state);\n            return state.copy_.delete(value) || (state.drafts_.has(value) ? state.copy_.delete(state.drafts_.get(value)) : /* istanbul ignore next */ false);\n        }\n        clear() {\n            const state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            if (latest(state).size) {\n                prepareSetCopy(state);\n                markChanged(state);\n                state.copy_.clear();\n            }\n        }\n        values() {\n            const state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            prepareSetCopy(state);\n            return state.copy_.values();\n        }\n        entries() {\n            const state = this[DRAFT_STATE];\n            assertUnrevoked(state);\n            prepareSetCopy(state);\n            return state.copy_.entries();\n        }\n        keys() {\n            return this.values();\n        }\n        [(DRAFT_STATE, Symbol.iterator)]() {\n            return this.values();\n        }\n        forEach(cb, thisArg) {\n            const iterator = this.values();\n            let result = iterator.next();\n            while(!result.done){\n                cb.call(thisArg, result.value, result.value, this);\n                result = iterator.next();\n            }\n        }\n    }\n    function proxySet_(target, parent) {\n        return new DraftSet(target, parent);\n    }\n    function prepareSetCopy(state) {\n        if (!state.copy_) {\n            state.copy_ = /* @__PURE__ */ new Set();\n            state.base_.forEach((value)=>{\n                if (isDraftable(value)) {\n                    const draft = createProxy(value, state);\n                    state.drafts_.set(value, draft);\n                    state.copy_.add(draft);\n                } else {\n                    state.copy_.add(value);\n                }\n            });\n        }\n    }\n    function assertUnrevoked(state) {\n        if (state.revoked_) die(3, JSON.stringify(latest(state)));\n    }\n    loadPlugin(\"MapSet\", {\n        proxyMap_,\n        proxySet_\n    });\n}\n// src/immer.ts\nvar immer = new Immer2();\nvar produce = immer.produce;\nvar produceWithPatches = immer.produceWithPatches.bind(immer);\nvar setAutoFreeze = immer.setAutoFreeze.bind(immer);\nvar setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer);\nvar applyPatches = immer.applyPatches.bind(immer);\nvar createDraft = immer.createDraft.bind(immer);\nvar finishDraft = immer.finishDraft.bind(immer);\nfunction castDraft(value) {\n    return value;\n}\nfunction castImmutable(value) {\n    return value;\n}\n //# sourceMappingURL=immer.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vbm9kZV9tb2R1bGVzL2ltbWVyL2Rpc3QvaW1tZXIubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7QUFBQSxtQkFBbUI7QUFDbkIsSUFBSUEsVUFBVUMsT0FBT0MsR0FBRyxDQUFDO0FBQ3pCLElBQUlDLFlBQVlGLE9BQU9DLEdBQUcsQ0FBQztBQUMzQixJQUFJRSxjQUFjSCxPQUFPQyxHQUFHLENBQUM7QUFFN0Isc0JBQXNCO0FBQ3RCLElBQUlHLFNBQVNDLEtBQXFDLEdBQUc7SUFDbkQsa0NBQWtDO0lBQ2xDLFNBQVNDLE1BQU07UUFDYixPQUFPLENBQUMsZ0JBQWdCLEVBQUVBLE9BQU8sZ0ZBQWdGLEVBQUVBLE9BQU8sd0NBQXdDLENBQUM7SUFDcks7SUFDQSxTQUFTQyxLQUFLO1FBQ1osT0FBTyxDQUFDLG1KQUFtSixFQUFFQSxNQUFNLENBQUMsQ0FBQztJQUN2SztJQUNBO0lBQ0EsU0FBU0MsSUFBSTtRQUNYLE9BQU8seUhBQXlIQTtJQUNsSTtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTtJQUNBLFNBQVNELEtBQUs7UUFDWixPQUFPLENBQUMsZ0NBQWdDLEVBQUVBLE1BQU0sQ0FBQztJQUNuRDtJQUNBO0lBQ0E7SUFDQTtJQUNBO0lBQ0EsU0FBU0EsS0FBSztRQUNaLE9BQU8sQ0FBQyxpQ0FBaUMsRUFBRUEsTUFBTSxDQUFDO0lBQ3BEO0NBR0QsR0FBRyxDQUFFO0FBQ04sU0FBU0UsSUFBSUMsS0FBSyxFQUFFLEdBQUdDLElBQUk7SUFDekIsSUFBSU4sSUFBcUMsRUFBRTtRQUN6QyxNQUFNTyxJQUFJUixNQUFNLENBQUNNLE1BQU07UUFDdkIsTUFBTUcsTUFBTSxPQUFPRCxNQUFNLGFBQWFBLEVBQUVFLEtBQUssQ0FBQyxNQUFNSCxRQUFRQztRQUM1RCxNQUFNLElBQUlHLE1BQU0sQ0FBQyxRQUFRLEVBQUVGLElBQUksQ0FBQztJQUNsQztJQUNBLE1BQU0sSUFBSUUsTUFDUixDQUFDLDJCQUEyQixFQUFFTCxN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USxFQUNoQnhHLElBQUksR0FBRzBPLEtBQUtDLFNBQVMsQ0FBQ3RMLE9BQU9mO0lBQ2pDO0lBQ0EyQyxXQUFXLFVBQVU7UUFBRTJHO1FBQVdDO0lBQVU7QUFDOUM7QUFFQSxlQUFlO0FBQ2YsSUFBSStDLFFBQVEsSUFBSTFFO0FBQ2hCLElBQUlFLFVBQVV3RSxNQUFNeEUsT0FBTztBQUMzQixJQUFJUyxxQkFBcUIrRCxNQUFNL0Qsa0JBQWtCLENBQUNnRSxJQUFJLENBQ3BERDtBQUVGLElBQUkzRCxnQkFBZ0IyRCxNQUFNM0QsYUFBYSxDQUFDNEQsSUFBSSxDQUFDRDtBQUM3QyxJQUFJekQsMEJBQTBCeUQsTUFBTXpELHVCQUF1QixDQUFDMEQsSUFBSSxDQUFDRDtBQUNqRSxJQUFJckQsZUFBZXFELE1BQU1yRCxZQUFZLENBQUNzRCxJQUFJLENBQUNEO0FBQzNDLElBQUl4RCxjQUFjd0QsTUFBTXhELFdBQVcsQ0FBQ3lELElBQUksQ0FBQ0Q7QUFDekMsSUFBSXRELGNBQWNzRCxNQUFNdEQsV0FBVyxDQUFDdUQsSUFBSSxDQUFDRDtBQUN6QyxTQUFTRSxVQUFVcE8sS0FBSztJQUN0QixPQUFPQTtBQUNUO0FBQ0EsU0FBU3FPLGNBQWNyTyxLQUFLO0lBQzFCLE9BQU9BO0FBQ1Q7QUFxQkUsQ0FDRixrQ0FBa0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9rcGktc3lzdGVtLWNsaWVudC8uLi9ub2RlX21vZHVsZXMvaW1tZXIvZGlzdC9pbW1lci5tanM/N2NkMiJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBzcmMvdXRpbHMvZW52LnRzXG52YXIgTk9USElORyA9IFN5bWJvbC5mb3IoXCJpbW1lci1ub3RoaW5nXCIpO1xudmFyIERSQUZUQUJMRSA9IFN5bWJvbC5mb3IoXCJpbW1lci1kcmFmdGFibGVcIik7XG52YXIgRFJBRlRfU1RBVEUgPSBTeW1ib2wuZm9yKFwiaW1tZXItc3RhdGVcIik7XG5cbi8vIHNyYy91dGlscy9lcnJvcnMudHNcbnZhciBlcnJvcnMgPSBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBbXG4gIC8vIEFsbCBlcnJvciBjb2Rlcywgc3RhcnRpbmcgYnkgMDpcbiAgZnVuY3Rpb24ocGx1Z2luKSB7XG4gICAgcmV0dXJuIGBUaGUgcGx1Z2luIGZvciAnJHtwbHVnaW59JyBoYXMgbm90IGJlZW4gbG9hZGVkIGludG8gSW1tZXIuIFRvIGVuYWJsZSB0aGUgcGx1Z2luLCBpbXBvcnQgYW5kIGNhbGwgXFxgZW5hYmxlJHtwbHVnaW59KClcXGAgd2hlbiBpbml0aWFsaXppbmcgeW91ciBhcHBsaWNhdGlvbi5gO1xuICB9LFxuICBmdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiBgcHJvZHVjZSBjYW4gb25seSBiZSBjYWxsZWQgb24gdGhpbmdzIHRoYXQgYXJlIGRyYWZ0YWJsZTogcGxhaW4gb2JqZWN0cywgYXJyYXlzLCBNYXAsIFNldCBvciBjbGFzc2VzIHRoYXQgYXJlIG1hcmtlZCB3aXRoICdbaW1tZXJhYmxlXTogdHJ1ZScuIEdvdCAnJHt0aGluZ30nYDtcbiAgfSxcbiAgXCJUaGlzIG9iamVjdCBoYXMgYmVlbiBmcm96ZW4gYW5kIHNob3VsZCBub3QgYmUgbXV0YXRlZFwiLFxuICBmdW5jdGlvbihkYXRhKSB7XG4gICAgcmV0dXJuIFwiQ2Fubm90IHVzZSBhIHByb3h5IHRoYXQgaGFzIGJlZW4gcmV2b2tlZC4gRGlkIHlvdSBwYXNzIGFuIG9iamVjdCBmcm9tIGluc2lkZSBhbiBpbW1lciBmdW5jdGlvbiB0byBhbiBhc3luYyBwcm9jZXNzPyBcIiArIGRhdGE7XG4gIH0sXG4gIFwiQW4gaW1tZXIgcHJvZHVjZXIgcmV0dXJuZWQgYSBuZXcgdmFsdWUgKmFuZCogbW9kaWZpZWQgaXRzIGRyYWZ0LiBFaXRoZXIgcmV0dXJuIGEgbmV3IHZhbHVlICpvciogbW9kaWZ5IHRoZSBkcmFmdC5cIixcbiAgXCJJbW1lciBmb3JiaWRzIGNpcmN1bGFyIHJlZmVyZW5jZXNcIixcbiAgXCJUaGUgZmlyc3Qgb3Igc2Vjb25kIGFyZ3VtZW50IHRvIGBwcm9kdWNlYCBtdXN0IGJlIGEgZnVuY3Rpb25cIixcbiAgXCJUaGUgdGhpcmQgYXJndW1lbnQgdG8gYHByb2R1Y2VgIG11c3QgYmUgYSBmdW5jdGlvbiBvciB1bmRlZmluZWRcIixcbiAgXCJGaXJzdCBhcmd1bWVudCB0byBgY3JlYXRlRHJhZnRgIG11c3QgYmUgYSBwbGFpbiBvYmplY3QsIGFuIGFycmF5LCBvciBhbiBpbW1lcmFibGUgb2JqZWN0XCIsXG4gIFwiRmlyc3QgYXJndW1lbnQgdG8gYGZpbmlzaERyYWZ0YCBtdXN0IGJlIGEgZHJhZnQgcmV0dXJuZWQgYnkgYGNyZWF0ZURyYWZ0YFwiLFxuICBmdW5jdGlvbih0aGluZykge1xuICAgIHJldHVybiBgJ2N1cnJlbnQnIGV4cGVjdHMgYSBkcmFmdCwgZ290OiAke3RoaW5nfWA7XG4gIH0sXG4gIFwiT2JqZWN0LmRlZmluZVByb3BlcnR5KCkgY2Fubm90IGJlIHVzZWQgb24gYW4gSW1tZXIgZHJhZnRcIixcbiAgXCJPYmplY3Quc2V0UHJvdG90eXBlT2YoKSBjYW5ub3QgYmUgdXNlZCBvbiBhbiBJbW1lciBkcmFmdFwiLFxuICBcIkltbWVyIG9ubHkgc3VwcG9ydHMgZGVsZXRpbmcgYXJyYXkgaW5kaWNlc1wiLFxuICBcIkltbWVyIG9ubHkgc3VwcG9ydHMgc2V0dGluZyBhcnJheSBpbmRpY2VzIGFuZCB0aGUgJ2xlbmd0aCcgcHJvcGVydHlcIixcbiAgZnVuY3Rpb24odGhpbmcpIHtcbiAgICByZXR1cm4gYCdvcmlnaW5hbCcgZXhwZWN0cyBhIGRyYWZ0LCBnb3Q6ICR7dGhpbmd9YDtcbiAgfVxuICAvLyBOb3RlOiBpZiBtb3JlIGVycm9ycyBhcmUgYWRkZWQsIHRoZSBlcnJvck9mZnNldCBpbiBQYXRjaGVzLnRzIHNob3VsZCBiZSBpbmNyZWFzZWRcbiAgLy8gU2VlIFBhdGNoZXMudHMgZm9yIGFkZGl0aW9uYWwgZXJyb3JzXG5dIDogW107XG5mdW5jdGlvbiBkaWUoZXJyb3IsIC4uLmFyZ3MpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGNvbnN0IGUgPSBlcnJvcnNbZXJyb3JdO1xuICAgIGNvbnN0IG1zZyA9IHR5cGVvZiBlID09PSBcImZ1bmN0aW9uXCIgPyBlLmFwcGx5KG51bGwsIGFyZ3MpIDogZTtcbiAgICB0aHJvdyBuZXcgRXJyb3IoYFtJbW1lcl0gJHttc2d9YCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgIGBbSW1tZXJdIG1pbmlmaWVkIGVycm9yIG5yOiAke2Vycm9yfS4gRnVsbCBlcnJvciBhdDogaHR0cHM6Ly9iaXQubHkvM2NYRUtXZmBcbiAgKTtcbn1cblxuLy8gc3JjL3V0aWxzL2NvbW1vbi50c1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xuZnVuY3Rpb24gaXNEcmFmdCh2YWx1ZSkge1xuICByZXR1cm4gISF2YWx1ZSAmJiAhIXZhbHVlW0RSQUZUX1NUQVRFXTtcbn1cbmZ1bmN0aW9uIGlzRHJhZnRhYmxlKHZhbHVlKSB7XG4gIGlmICghdmFsdWUpXG4gICAgcmV0dXJuIGZhbHNlO1xuICByZXR1cm4gaXNQbGFpbk9iamVjdCh2YWx1ZSkgfHwgQXJyYXkuaXNBcnJheSh2YWx1ZSkgfHwgISF2YWx1ZVtEUkFGVEFCTEVdIHx8ICEhdmFsdWUuY29uc3RydWN0b3I/LltEUkFGVEFCTEVdIHx8IGlzTWFwKHZhbHVlKSB8fCBpc1NldCh2YWx1ZSk7XG59XG52YXIgb2JqZWN0Q3RvclN0cmluZyA9IE9iamVjdC5wcm90b3R5cGUuY29uc3RydWN0b3IudG9TdHJpbmcoKTtcbmZ1bmN0aW9uIGlzUGxhaW5PYmplY3QodmFsdWUpIHtcbiAgaWYgKCF2YWx1ZSB8fCB0eXBlb2YgdmFsdWUgIT09IFwib2JqZWN0XCIpXG4gICAgcmV0dXJuIGZhbHNlO1xuICBjb25zdCBwcm90byA9IGdldFByb3RvdHlwZU9mKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgY29uc3QgQ3RvciA9IE9iamVjdC5oYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCBcImNvbnN0cnVjdG9yXCIpICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuICBpZiAoQ3RvciA9PT0gT2JqZWN0KVxuICAgIHJldHVybiB0cnVlO1xuICByZXR1cm4gdHlwZW9mIEN0b3IgPT0gXCJmdW5jdGlvblwiICYmIEZ1bmN0aW9uLnRvU3RyaW5nLmNhbGwoQ3RvcikgPT09IG9iamVjdEN0b3JTdHJpbmc7XG59XG5mdW5jdGlvbiBvcmlnaW5hbCh2YWx1ZSkge1xuICBpZiAoIWlzRHJhZnQodmFsdWUpKVxuICAgIGRpZSgxNSwgdmFsdWUpO1xuICByZXR1cm4gdmFsdWVbRFJBRlRfU1RBVEVdLmJhc2VfO1xufVxuZnVuY3Rpb24gZWFjaChvYmosIGl0ZXIpIHtcbiAgaWYgKGdldEFyY2h0eXBlKG9iaikgPT09IDAgLyogT2JqZWN0ICovKSB7XG4gICAgUmVmbGVjdC5vd25LZXlzKG9iaikuZm9yRWFjaCgoa2V5KSA9PiB7XG4gICAgICBpdGVyKGtleSwgb2JqW2tleV0sIG9iaik7XG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqLmZvckVhY2goKGVudHJ5LCBpbmRleCkgPT4gaXRlcihpbmRleCwgZW50cnksIG9iaikpO1xuICB9XG59XG5mdW5jdGlvbiBnZXRBcmNodHlwZSh0aGluZykge1xuICBjb25zdCBzdGF0ZSA9IHRoaW5nW0RSQUZUX1NUQVRFXTtcbiAgcmV0dXJuIHN0YXRlID8gc3RhdGUudHlwZV8gOiBBcnJheS5pc0FycmF5KHRoaW5nKSA/IDEgLyogQXJyYXkgKi8gOiBpc01hcCh0aGluZykgPyAyIC8qIE1hcCAqLyA6IGlzU2V0KHRoaW5nKSA/IDMgLyogU2V0ICovIDogMCAvKiBPYmplY3QgKi87XG59XG5mdW5jdGlvbiBoYXModGhpbmcsIHByb3ApIHtcbiAgcmV0dXJuIGdldEFyY2h0eXBlKHRoaW5nKSA9PT0gMiAvKiBNYXAgKi8gPyB0aGluZy5oYXMocHJvcCkgOiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodGhpbmcsIHByb3ApO1xufVxuZnVuY3Rpb24gZ2V0KHRoaW5nLCBwcm9wKSB7XG4gIHJldHVybiBnZXRBcmNodHlwZSh0aGluZykgPT09IDIgLyogTWFwICovID8gdGhpbmcuZ2V0KHByb3ApIDogdGhpbmdbcHJvcF07XG59XG5mdW5jdGlvbiBzZXQodGhpbmcsIHByb3BPck9sZFZhbHVlLCB2YWx1ZSkge1xuICBjb25zdCB0ID0gZ2V0QXJjaHR5cGUodGhpbmcpO1xuICBpZiAodCA9PT0gMiAvKiBNYXAgKi8pXG4gICAgdGhpbmcuc2V0KHByb3BPck9sZFZhbHVlLCB2YWx1ZSk7XG4gIGVsc2UgaWYgKHQgPT09IDMgLyogU2V0ICovKSB7XG4gICAgdGhpbmcuYWRkKHZhbHVlKTtcbiAgfSBlbHNlXG4gICAgdGhpbmdbcHJvcE9yT2xkVmFsdWVdID0gdmFsdWU7XG59XG5mdW5jdGlvbiBpcyh4LCB5KSB7XG4gIGlmICh4ID09PSB5KSB7XG4gICAgcmV0dXJuIHggIT09IDAgfHwgMSAvIHggPT09IDEgLyB5O1xuICB9IGVsc2Uge1xuICAgIHJldHVybiB4ICE9PSB4ICYmIHkgIT09IHk7XG4gIH1cbn1cbmZ1bmN0aW9uIGlzTWFwKHRhcmdldCkge1xuICByZXR1cm4gdGFyZ2V0IGluc3RhbmNlb2YgTWFwO1xufVxuZnVuY3Rpb24gaXNTZXQodGFyZ2V0KSB7XG4gIHJldHVybiB0YXJnZXQgaW5zdGFuY2VvZiBTZXQ7XG59XG5mdW5jdGlvbiBsYXRlc3Qoc3RhdGUpIHtcbiAgcmV0dXJuIHN0YXRlLmNvcHlfIHx8IHN0YXRlLmJhc2VfO1xufVxuZnVuY3Rpb24gc2hhbGxvd0NvcHkoYmFzZSwgc3RyaWN0KSB7XG4gIGlmIChpc01hcChiYXNlKSkge1xuICAgIHJldHVybiBuZXcgTWFwKGJhc2UpO1xuICB9XG4gIGlmIChpc1NldChiYXNlKSkge1xuICAgIHJldHVybiBuZXcgU2V0KGJhc2UpO1xuICB9XG4gIGlmIChBcnJheS5pc0FycmF5KGJhc2UpKVxuICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChiYXNlKTtcbiAgY29uc3QgaXNQbGFpbiA9IGlzUGxhaW5PYmplY3QoYmFzZSk7XG4gIGlmIChzdHJpY3QgPT09IHRydWUgfHwgc3RyaWN0ID09PSBcImNsYXNzX29ubHlcIiAmJiAhaXNQbGFpbikge1xuICAgIGNvbnN0IGRlc2NyaXB0b3JzID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMoYmFzZSk7XG4gICAgZGVsZXRlIGRlc2NyaXB0b3JzW0RSQUZUX1NUQVRFXTtcbiAgICBsZXQga2V5cyA9IFJlZmxlY3Qub3duS2V5cyhkZXNjcmlwdG9ycyk7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBrZXkgPSBrZXlzW2ldO1xuICAgICAgY29uc3QgZGVzYyA9IGRlc2NyaXB0b3JzW2tleV07XG4gICAgICBpZiAoZGVzYy53cml0YWJsZSA9PT0gZmFsc2UpIHtcbiAgICAgICAgZGVzYy53cml0YWJsZSA9IHRydWU7XG4gICAgICAgIGRlc2MuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChkZXNjLmdldCB8fCBkZXNjLnNldClcbiAgICAgICAgZGVzY3JpcHRvcnNba2V5XSA9IHtcbiAgICAgICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICAgICAgLy8gY291bGQgbGl2ZSB3aXRoICEhZGVzYy5zZXQgYXMgd2VsbCBoZXJlLi4uXG4gICAgICAgICAgZW51bWVyYWJsZTogZGVzYy5lbnVtZXJhYmxlLFxuICAgICAgICAgIHZhbHVlOiBiYXNlW2tleV1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIE9iamVjdC5jcmVhdGUoZ2V0UHJvdG90eXBlT2YoYmFzZSksIGRlc2NyaXB0b3JzKTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBwcm90byA9IGdldFByb3RvdHlwZU9mKGJhc2UpO1xuICAgIGlmIChwcm90byAhPT0gbnVsbCAmJiBpc1BsYWluKSB7XG4gICAgICByZXR1cm4geyAuLi5iYXNlIH07XG4gICAgfVxuICAgIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUocHJvdG8pO1xuICAgIHJldHVybiBPYmplY3QuYXNzaWduKG9iaiwgYmFzZSk7XG4gIH1cbn1cbmZ1bmN0aW9uIGZyZWV6ZShvYmosIGRlZXAgPSBmYWxzZSkge1xuICBpZiAoaXNGcm96ZW4ob2JqKSB8fCBpc0RyYWZ0KG9iaikgfHwgIWlzRHJhZnRhYmxlKG9iaikpXG4gICAgcmV0dXJuIG9iajtcbiAgaWYgKGdldEFyY2h0eXBlKG9iaikgPiAxKSB7XG4gICAgb2JqLnNldCA9IG9iai5hZGQgPSBvYmouY2xlYXIgPSBvYmouZGVsZXRlID0gZG9udE11dGF0ZUZyb3plbkNvbGxlY3Rpb25zO1xuICB9XG4gIE9iamVjdC5mcmVlemUob2JqKTtcbiAgaWYgKGRlZXApXG4gICAgT2JqZWN0LmVudHJpZXMob2JqKS5mb3JFYWNoKChba2V5LCB2YWx1ZV0pID0+IGZyZWV6ZSh2YWx1ZSwgdHJ1ZSkpO1xuICByZXR1cm4gb2JqO1xufVxuZnVuY3Rpb24gZG9udE11dGF0ZUZyb3plbkNvbGxlY3Rpb25zKCkge1xuICBkaWUoMik7XG59XG5mdW5jdGlvbiBpc0Zyb3plbihvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5pc0Zyb3plbihvYmopO1xufVxuXG4vLyBzcmMvdXRpbHMvcGx1Z2lucy50c1xudmFyIHBsdWdpbnMgPSB7fTtcbmZ1bmN0aW9uIGdldFBsdWdpbihwbHVnaW5LZXkpIHtcbiAgY29uc3QgcGx1Z2luID0gcGx1Z2luc1twbHVnaW5LZXldO1xuICBpZiAoIXBsdWdpbikge1xuICAgIGRpZSgwLCBwbHVnaW5LZXkpO1xuICB9XG4gIHJldHVybiBwbHVnaW47XG59XG5mdW5jdGlvbiBsb2FkUGx1Z2luKHBsdWdpbktleSwgaW1wbGVtZW50YXRpb24pIHtcbiAgaWYgKCFwbHVnaW5zW3BsdWdpbktleV0pXG4gICAgcGx1Z2luc1twbHVnaW5LZXldID0gaW1wbGVtZW50YXRpb247XG59XG5cbi8vIHNyYy9jb3JlL3Njb3BlLnRzXG52YXIgY3VycmVudFNjb3BlO1xuZnVuY3Rpb24gZ2V0Q3VycmVudFNjb3BlKCkge1xuICByZXR1cm4gY3VycmVudFNjb3BlO1xufVxuZnVuY3Rpb24gY3JlYXRlU2NvcGUocGFyZW50XywgaW1tZXJfKSB7XG4gIHJldHVybiB7XG4gICAgZHJhZnRzXzogW10sXG4gICAgcGFyZW50XyxcbiAgICBpbW1lcl8sXG4gICAgLy8gV2hlbmV2ZXIgdGhlIG1vZGlmaWVkIGRyYWZ0IGNvbnRhaW5zIGEgZHJhZnQgZnJvbSBhbm90aGVyIHNjb3BlLCB3ZVxuICAgIC8vIG5lZWQgdG8gcHJldmVudCBhdXRvLWZyZWV6aW5nIHNvIHRoZSB1bm93bmVkIGRyYWZ0IGNhbiBiZSBmaW5hbGl6ZWQuXG4gICAgY2FuQXV0b0ZyZWV6ZV86IHRydWUsXG4gICAgdW5maW5hbGl6ZWREcmFmdHNfOiAwXG4gIH07XG59XG5mdW5jdGlvbiB1c2VQYXRjaGVzSW5TY29wZShzY29wZSwgcGF0Y2hMaXN0ZW5lcikge1xuICBpZiAocGF0Y2hMaXN0ZW5lcikge1xuICAgIGdldFBsdWdpbihcIlBhdGNoZXNcIik7XG4gICAgc2NvcGUucGF0Y2hlc18gPSBbXTtcbiAgICBzY29wZS5pbnZlcnNlUGF0Y2hlc18gPSBbXTtcbiAgICBzY29wZS5wYXRjaExpc3RlbmVyXyA9IHBhdGNoTGlzdGVuZXI7XG4gIH1cbn1cbmZ1bmN0aW9uIHJldm9rZVNjb3BlKHNjb3BlKSB7XG4gIGxlYXZlU2NvcGUoc2NvcGUpO1xuICBzY29wZS5kcmFmdHNfLmZvckVhY2gocmV2b2tlRHJhZnQpO1xuICBzY29wZS5kcmFmdHNfID0gbnVsbDtcbn1cbmZ1bmN0aW9uIGxlYXZlU2NvcGUoc2NvcGUpIHtcbiAgaWYgKHNjb3BlID09PSBjdXJyZW50U2NvcGUpIHtcbiAgICBjdXJyZW50U2NvcGUgPSBzY29wZS5wYXJlbnRfO1xuICB9XG59XG5mdW5jdGlvbiBlbnRlclNjb3BlKGltbWVyMikge1xuICByZXR1cm4gY3VycmVudFNjb3BlID0gY3JlYXRlU2NvcGUoY3VycmVudFNjb3BlLCBpbW1lcjIpO1xufVxuZnVuY3Rpb24gcmV2b2tlRHJhZnQoZHJhZnQpIHtcbiAgY29uc3Qgc3RhdGUgPSBkcmFmdFtEUkFGVF9TVEFURV07XG4gIGlmIChzdGF0ZS50eXBlXyA9PT0gMCAvKiBPYmplY3QgKi8gfHwgc3RhdGUudHlwZV8gPT09IDEgLyogQXJyYXkgKi8pXG4gICAgc3RhdGUucmV2b2tlXygpO1xuICBlbHNlXG4gICAgc3RhdGUucmV2b2tlZF8gPSB0cnVlO1xufVxuXG4vLyBzcmMvY29yZS9maW5hbGl6ZS50c1xuZnVuY3Rpb24gcHJvY2Vzc1Jlc3VsdChyZXN1bHQsIHNjb3BlKSB7XG4gIHNjb3BlLnVuZmluYWxpemVkRHJhZnRzXyA9IHNjb3BlLmRyYWZ0c18ubGVuZ3RoO1xuICBjb25zdCBiYXNlRHJhZnQgPSBzY29wZS5kcmFmdHNfWzBdO1xuICBjb25zdCBpc1JlcGxhY2VkID0gcmVzdWx0ICE9PSB2b2lkIDAgJiYgcmVzdWx0ICE9PSBiYXNlRHJhZnQ7XG4gIGlmIChpc1JlcGxhY2VkKSB7XG4gICAgaWYgKGJhc2VEcmFmdFtEUkFGVF9TVEFURV0ubW9kaWZpZWRfKSB7XG4gICAgICByZXZva2VTY29wZShzY29wZSk7XG4gICAgICBkaWUoNCk7XG4gICAgfVxuICAgIGlmIChpc0RyYWZ0YWJsZShyZXN1bHQpKSB7XG4gICAgICByZXN1bHQgPSBmaW5hbGl6ZShzY29wZSwgcmVzdWx0KTtcbiAgICAgIGlmICghc2NvcGUucGFyZW50XylcbiAgICAgICAgbWF5YmVGcmVlemUoc2NvcGUsIHJlc3VsdCk7XG4gICAgfVxuICAgIGlmIChzY29wZS5wYXRjaGVzXykge1xuICAgICAgZ2V0UGx1Z2luKFwiUGF0Y2hlc1wiKS5nZW5lcmF0ZVJlcGxhY2VtZW50UGF0Y2hlc18oXG4gICAgICAgIGJhc2VEcmFmdFtEUkFGVF9TVEFURV0uYmFzZV8sXG4gICAgICAgIHJlc3VsdCxcbiAgICAgICAgc2NvcGUucGF0Y2hlc18sXG4gICAgICAgIHNjb3BlLmludmVyc2VQYXRjaGVzX1xuICAgICAgKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgcmVzdWx0ID0gZmluYWxpemUoc2NvcGUsIGJhc2VEcmFmdCwgW10pO1xuICB9XG4gIHJldm9rZVNjb3BlKHNjb3BlKTtcbiAgaWYgKHNjb3BlLnBhdGNoZXNfKSB7XG4gICAgc2NvcGUucGF0Y2hMaXN0ZW5lcl8oc2NvcGUucGF0Y2hlc18sIHNjb3BlLmludmVyc2VQYXRjaGVzXyk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdCAhPT0gTk9USElORyA/IHJlc3VsdCA6IHZvaWQgMDtcbn1cbmZ1bmN0aW9uIGZpbmFsaXplKHJvb3RTY29wZSwgdmFsdWUsIHBhdGgpIHtcbiAgaWYgKGlzRnJvemVuKHZhbHVlKSlcbiAgICByZXR1cm4gdmFsdWU7XG4gIGNvbnN0IHN0YXRlID0gdmFsdWVbRFJBRlRfU1RBVEVdO1xuICBpZiAoIXN0YXRlKSB7XG4gICAgZWFjaChcbiAgICAgIHZhbHVlLFxuICAgICAgKGtleSwgY2hpbGRWYWx1ZSkgPT4gZmluYWxpemVQcm9wZXJ0eShyb290U2NvcGUsIHN0YXRlLCB2YWx1ZSwga2V5LCBjaGlsZFZhbHVlLCBwYXRoKVxuICAgICk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIGlmIChzdGF0ZS5zY29wZV8gIT09IHJvb3RTY29wZSlcbiAgICByZXR1cm4gdmFsdWU7XG4gIGlmICghc3RhdGUubW9kaWZpZWRfKSB7XG4gICAgbWF5YmVGcmVlemUocm9vdFNjb3BlLCBzdGF0ZS5iYXNlXywgdHJ1ZSk7XG4gICAgcmV0dXJuIHN0YXRlLmJhc2VfO1xuICB9XG4gIGlmICghc3RhdGUuZmluYWxpemVkXykge1xuICAgIHN0YXRlLmZpbmFsaXplZF8gPSB0cnVlO1xuICAgIHN0YXRlLnNjb3BlXy51bmZpbmFsaXplZERyYWZ0c18tLTtcbiAgICBjb25zdCByZXN1bHQgPSBzdGF0ZS5jb3B5XztcbiAgICBsZXQgcmVzdWx0RWFjaCA9IHJlc3VsdDtcbiAgICBsZXQgaXNTZXQyID0gZmFsc2U7XG4gICAgaWYgKHN0YXRlLnR5cGVfID09PSAzIC8qIFNldCAqLykge1xuICAgICAgcmVzdWx0RWFjaCA9IG5ldyBTZXQocmVzdWx0KTtcbiAgICAgIHJlc3VsdC5jbGVhcigpO1xuICAgICAgaXNTZXQyID0gdHJ1ZTtcbiAgICB9XG4gICAgZWFjaChcbiAgICAgIHJlc3VsdEVhY2gsXG4gICAgICAoa2V5LCBjaGlsZFZhbHVlKSA9PiBmaW5hbGl6ZVByb3BlcnR5KHJvb3RTY29wZSwgc3RhdGUsIHJlc3VsdCwga2V5LCBjaGlsZFZhbHVlLCBwYXRoLCBpc1NldDIpXG4gICAgKTtcbiAgICBtYXliZUZyZWV6ZShyb290U2NvcGUsIHJlc3VsdCwgZmFsc2UpO1xuICAgIGlmIChwYXRoICYmIHJvb3RTY29wZS5wYXRjaGVzXykge1xuICAgICAgZ2V0UGx1Z2luKFwiUGF0Y2hlc1wiKS5nZW5lcmF0ZVBhdGNoZXNfKFxuICAgICAgICBzdGF0ZSxcbiAgICAgICAgcGF0aCxcbiAgICAgICAgcm9vdFNjb3BlLnBhdGNoZXNfLFxuICAgICAgICByb290U2NvcGUuaW52ZXJzZVBhdGNoZXNfXG4gICAgICApO1xuICAgIH1cbiAgfVxuICByZXR1cm4gc3RhdGUuY29weV87XG59XG5mdW5jdGlvbiBmaW5hbGl6ZVByb3BlcnR5KHJvb3RTY29wZSwgcGFyZW50U3RhdGUsIHRhcmdldE9iamVjdCwgcHJvcCwgY2hpbGRWYWx1ZSwgcm9vdFBhdGgsIHRhcmdldElzU2V0KSB7XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgJiYgY2hpbGRWYWx1ZSA9PT0gdGFyZ2V0T2JqZWN0KVxuICAgIGRpZSg1KTtcbiAgaWYgKGlzRHJhZnQoY2hpbGRWYWx1ZSkpIHtcbiAgICBjb25zdCBwYXRoID0gcm9vdFBhdGggJiYgcGFyZW50U3RhdGUgJiYgcGFyZW50U3RhdGUudHlwZV8gIT09IDMgLyogU2V0ICovICYmIC8vIFNldCBvYmplY3RzIGFyZSBhdG9taWMgc2luY2UgdGhleSBoYXZlIG5vIGtleXMuXG4gICAgIWhhcyhwYXJlbnRTdGF0ZS5hc3NpZ25lZF8sIHByb3ApID8gcm9vdFBhdGguY29uY2F0KHByb3ApIDogdm9pZCAwO1xuICAgIGNvbnN0IHJlcyA9IGZpbmFsaXplKHJvb3RTY29wZSwgY2hpbGRWYWx1ZSwgcGF0aCk7XG4gICAgc2V0KHRhcmdldE9iamVjdCwgcHJvcCwgcmVzKTtcbiAgICBpZiAoaXNEcmFmdChyZXMpKSB7XG4gICAgICByb290U2NvcGUuY2FuQXV0b0ZyZWV6ZV8gPSBmYWxzZTtcbiAgICB9IGVsc2VcbiAgICAgIHJldHVybjtcbiAgfSBlbHNlIGlmICh0YXJnZXRJc1NldCkge1xuICAgIHRhcmdldE9iamVjdC5hZGQoY2hpbGRWYWx1ZSk7XG4gIH1cbiAgaWYgKGlzRHJhZnRhYmxlKGNoaWxkVmFsdWUpICYmICFpc0Zyb3plbihjaGlsZFZhbHVlKSkge1xuICAgIGlmICghcm9vdFNjb3BlLmltbWVyXy5hdXRvRnJlZXplXyAmJiByb290U2NvcGUudW5maW5hbGl6ZWREcmFmdHNfIDwgMSkge1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBmaW5hbGl6ZShyb290U2NvcGUsIGNoaWxkVmFsdWUpO1xuICAgIGlmICgoIXBhcmVudFN0YXRlIHx8ICFwYXJlbnRTdGF0ZS5zY29wZV8ucGFyZW50XykgJiYgdHlwZW9mIHByb3AgIT09IFwic3ltYm9sXCIgJiYgT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHRhcmdldE9iamVjdCwgcHJvcCkpXG4gICAgICBtYXliZUZyZWV6ZShyb290U2NvcGUsIGNoaWxkVmFsdWUpO1xuICB9XG59XG5mdW5jdGlvbiBtYXliZUZyZWV6ZShzY29wZSwgdmFsdWUsIGRlZXAgPSBmYWxzZSkge1xuICBpZiAoIXNjb3BlLnBhcmVudF8gJiYgc2NvcGUuaW1tZXJfLmF1dG9GcmVlemVfICYmIHNjb3BlLmNhbkF1dG9GcmVlemVfKSB7XG4gICAgZnJlZXplKHZhbHVlLCBkZWVwKTtcbiAgfVxufVxuXG4vLyBzcmMvY29yZS9wcm94eS50c1xuZnVuY3Rpb24gY3JlYXRlUHJveHlQcm94eShiYXNlLCBwYXJlbnQpIHtcbiAgY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoYmFzZSk7XG4gIGNvbnN0IHN0YXRlID0ge1xuICAgIHR5cGVfOiBpc0FycmF5ID8gMSAvKiBBcnJheSAqLyA6IDAgLyogT2JqZWN0ICovLFxuICAgIC8vIFRyYWNrIHdoaWNoIHByb2R1Y2UgY2FsbCB0aGlzIGlzIGFzc29jaWF0ZWQgd2l0aC5cbiAgICBzY29wZV86IHBhcmVudCA/IHBhcmVudC5zY29wZV8gOiBnZXRDdXJyZW50U2NvcGUoKSxcbiAgICAvLyBUcnVlIGZvciBib3RoIHNoYWxsb3cgYW5kIGRlZXAgY2hhbmdlcy5cbiAgICBtb2RpZmllZF86IGZhbHNlLFxuICAgIC8vIFVzZWQgZHVyaW5nIGZpbmFsaXphdGlvbi5cbiAgICBmaW5hbGl6ZWRfOiBmYWxzZSxcbiAgICAvLyBUcmFjayB3aGljaCBwcm9wZXJ0aWVzIGhhdmUgYmVlbiBhc3NpZ25lZCAodHJ1ZSkgb3IgZGVsZXRlZCAoZmFsc2UpLlxuICAgIGFzc2lnbmVkXzoge30sXG4gICAgLy8gVGhlIHBhcmVudCBkcmFmdCBzdGF0ZS5cbiAgICBwYXJlbnRfOiBwYXJlbnQsXG4gICAgLy8gVGhlIGJhc2Ugc3RhdGUuXG4gICAgYmFzZV86IGJhc2UsXG4gICAgLy8gVGhlIGJhc2UgcHJveHkuXG4gICAgZHJhZnRfOiBudWxsLFxuICAgIC8vIHNldCBiZWxvd1xuICAgIC8vIFRoZSBiYXNlIGNvcHkgd2l0aCBhbnkgdXBkYXRlZCB2YWx1ZXMuXG4gICAgY29weV86IG51bGwsXG4gICAgLy8gQ2FsbGVkIGJ5IHRoZSBgcHJvZHVjZWAgZnVuY3Rpb24uXG4gICAgcmV2b2tlXzogbnVsbCxcbiAgICBpc01hbnVhbF86IGZhbHNlXG4gIH07XG4gIGxldCB0YXJnZXQgPSBzdGF0ZTtcbiAgbGV0IHRyYXBzID0gb2JqZWN0VHJhcHM7XG4gIGlmIChpc0FycmF5KSB7XG4gICAgdGFyZ2V0ID0gW3N0YXRlXTtcbiAgICB0cmFwcyA9IGFycmF5VHJhcHM7XG4gIH1cbiAgY29uc3QgeyByZXZva2UsIHByb3h5IH0gPSBQcm94eS5yZXZvY2FibGUodGFyZ2V0LCB0cmFwcyk7XG4gIHN0YXRlLmRyYWZ0XyA9IHByb3h5O1xuICBzdGF0ZS5yZXZva2VfID0gcmV2b2tlO1xuICByZXR1cm4gcHJveHk7XG59XG52YXIgb2JqZWN0VHJhcHMgPSB7XG4gIGdldChzdGF0ZSwgcHJvcCkge1xuICAgIGlmIChwcm9wID09PSBEUkFGVF9TVEFURSlcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgICBjb25zdCBzb3VyY2UgPSBsYXRlc3Qoc3RhdGUpO1xuICAgIGlmICghaGFzKHNvdXJjZSwgcHJvcCkpIHtcbiAgICAgIHJldHVybiByZWFkUHJvcEZyb21Qcm90byhzdGF0ZSwgc291cmNlLCBwcm9wKTtcbiAgICB9XG4gICAgY29uc3QgdmFsdWUgPSBzb3VyY2VbcHJvcF07XG4gICAgaWYgKHN0YXRlLmZpbmFsaXplZF8gfHwgIWlzRHJhZnRhYmxlKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBpZiAodmFsdWUgPT09IHBlZWsoc3RhdGUuYmFzZV8sIHByb3ApKSB7XG4gICAgICBwcmVwYXJlQ29weShzdGF0ZSk7XG4gICAgICByZXR1cm4gc3RhdGUuY29weV9bcHJvcF0gPSBjcmVhdGVQcm94eSh2YWx1ZSwgc3RhdGUpO1xuICAgIH1cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIGhhcyhzdGF0ZSwgcHJvcCkge1xuICAgIHJldHVybiBwcm9wIGluIGxhdGVzdChzdGF0ZSk7XG4gIH0sXG4gIG93bktleXMoc3RhdGUpIHtcbiAgICByZXR1cm4gUmVmbGVjdC5vd25LZXlzKGxhdGVzdChzdGF0ZSkpO1xuICB9LFxuICBzZXQoc3RhdGUsIHByb3AsIHZhbHVlKSB7XG4gICAgY29uc3QgZGVzYyA9IGdldERlc2NyaXB0b3JGcm9tUHJvdG8obGF0ZXN0KHN0YXRlKSwgcHJvcCk7XG4gICAgaWYgKGRlc2M/LnNldCkge1xuICAgICAgZGVzYy5zZXQuY2FsbChzdGF0ZS5kcmFmdF8sIHZhbHVlKTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAoIXN0YXRlLm1vZGlmaWVkXykge1xuICAgICAgY29uc3QgY3VycmVudDIgPSBwZWVrKGxhdGVzdChzdGF0ZSksIHByb3ApO1xuICAgICAgY29uc3QgY3VycmVudFN0YXRlID0gY3VycmVudDI/LltEUkFGVF9TVEFURV07XG4gICAgICBpZiAoY3VycmVudFN0YXRlICYmIGN1cnJlbnRTdGF0ZS5iYXNlXyA9PT0gdmFsdWUpIHtcbiAgICAgICAgc3RhdGUuY29weV9bcHJvcF0gPSB2YWx1ZTtcbiAgICAgICAgc3RhdGUuYXNzaWduZWRfW3Byb3BdID0gZmFsc2U7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGlzKHZhbHVlLCBjdXJyZW50MikgJiYgKHZhbHVlICE9PSB2b2lkIDAgfHwgaGFzKHN0YXRlLmJhc2VfLCBwcm9wKSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgcHJlcGFyZUNvcHkoc3RhdGUpO1xuICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgIH1cbiAgICBpZiAoc3RhdGUuY29weV9bcHJvcF0gPT09IHZhbHVlICYmIC8vIHNwZWNpYWwgY2FzZTogaGFuZGxlIG5ldyBwcm9wcyB3aXRoIHZhbHVlICd1bmRlZmluZWQnXG4gICAgKHZhbHVlICE9PSB2b2lkIDAgfHwgcHJvcCBpbiBzdGF0ZS5jb3B5XykgfHwgLy8gc3BlY2lhbCBjYXNlOiBOYU5cbiAgICBOdW1iZXIuaXNOYU4odmFsdWUpICYmIE51bWJlci5pc05hTihzdGF0ZS5jb3B5X1twcm9wXSkpXG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICBzdGF0ZS5jb3B5X1twcm9wXSA9IHZhbHVlO1xuICAgIHN0YXRlLmFzc2lnbmVkX1twcm9wXSA9IHRydWU7XG4gICAgcmV0dXJuIHRydWU7XG4gIH0sXG4gIGRlbGV0ZVByb3BlcnR5KHN0YXRlLCBwcm9wKSB7XG4gICAgaWYgKHBlZWsoc3RhdGUuYmFzZV8sIHByb3ApICE9PSB2b2lkIDAgfHwgcHJvcCBpbiBzdGF0ZS5iYXNlXykge1xuICAgICAgc3RhdGUuYXNzaWduZWRfW3Byb3BdID0gZmFsc2U7XG4gICAgICBwcmVwYXJlQ29weShzdGF0ZSk7XG4gICAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlbGV0ZSBzdGF0ZS5hc3NpZ25lZF9bcHJvcF07XG4gICAgfVxuICAgIGlmIChzdGF0ZS5jb3B5Xykge1xuICAgICAgZGVsZXRlIHN0YXRlLmNvcHlfW3Byb3BdO1xuICAgIH1cbiAgICByZXR1cm4gdHJ1ZTtcbiAgfSxcbiAgLy8gTm90ZTogV2UgbmV2ZXIgY29lcmNlIGBkZXNjLnZhbHVlYCBpbnRvIGFuIEltbWVyIGRyYWZ0LCBiZWNhdXNlIHdlIGNhbid0IG1ha2VcbiAgLy8gdGhlIHNhbWUgZ3VhcmFudGVlIGluIEVTNSBtb2RlLlxuICBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc3RhdGUsIHByb3ApIHtcbiAgICBjb25zdCBvd25lciA9IGxhdGVzdChzdGF0ZSk7XG4gICAgY29uc3QgZGVzYyA9IFJlZmxlY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG93bmVyLCBwcm9wKTtcbiAgICBpZiAoIWRlc2MpXG4gICAgICByZXR1cm4gZGVzYztcbiAgICByZXR1cm4ge1xuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHN0YXRlLnR5cGVfICE9PSAxIC8qIEFycmF5ICovIHx8IHByb3AgIT09IFwibGVuZ3RoXCIsXG4gICAgICBlbnVtZXJhYmxlOiBkZXNjLmVudW1lcmFibGUsXG4gICAgICB2YWx1ZTogb3duZXJbcHJvcF1cbiAgICB9O1xuICB9LFxuICBkZWZpbmVQcm9wZXJ0eSgpIHtcbiAgICBkaWUoMTEpO1xuICB9LFxuICBnZXRQcm90b3R5cGVPZihzdGF0ZSkge1xuICAgIHJldHVybiBnZXRQcm90b3R5cGVPZihzdGF0ZS5iYXNlXyk7XG4gIH0sXG4gIHNldFByb3RvdHlwZU9mKCkge1xuICAgIGRpZSgxMik7XG4gIH1cbn07XG52YXIgYXJyYXlUcmFwcyA9IHt9O1xuZWFjaChvYmplY3RUcmFwcywgKGtleSwgZm4pID0+IHtcbiAgYXJyYXlUcmFwc1trZXldID0gZnVuY3Rpb24oKSB7XG4gICAgYXJndW1lbnRzWzBdID0gYXJndW1lbnRzWzBdWzBdO1xuICAgIHJldHVybiBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xuICB9O1xufSk7XG5hcnJheVRyYXBzLmRlbGV0ZVByb3BlcnR5ID0gZnVuY3Rpb24oc3RhdGUsIHByb3ApIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBpc05hTihwYXJzZUludChwcm9wKSkpXG4gICAgZGllKDEzKTtcbiAgcmV0dXJuIGFycmF5VHJhcHMuc2V0LmNhbGwodGhpcywgc3RhdGUsIHByb3AsIHZvaWQgMCk7XG59O1xuYXJyYXlUcmFwcy5zZXQgPSBmdW5jdGlvbihzdGF0ZSwgcHJvcCwgdmFsdWUpIHtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiAmJiBwcm9wICE9PSBcImxlbmd0aFwiICYmIGlzTmFOKHBhcnNlSW50KHByb3ApKSlcbiAgICBkaWUoMTQpO1xuICByZXR1cm4gb2JqZWN0VHJhcHMuc2V0LmNhbGwodGhpcywgc3RhdGVbMF0sIHByb3AsIHZhbHVlLCBzdGF0ZVswXSk7XG59O1xuZnVuY3Rpb24gcGVlayhkcmFmdCwgcHJvcCkge1xuICBjb25zdCBzdGF0ZSA9IGRyYWZ0W0RSQUZUX1NUQVRFXTtcbiAgY29uc3Qgc291cmNlID0gc3RhdGUgPyBsYXRlc3Qoc3RhdGUpIDogZHJhZnQ7XG4gIHJldHVybiBzb3VyY2VbcHJvcF07XG59XG5mdW5jdGlvbiByZWFkUHJvcEZyb21Qcm90byhzdGF0ZSwgc291cmNlLCBwcm9wKSB7XG4gIGNvbnN0IGRlc2MgPSBnZXREZXNjcmlwdG9yRnJvbVByb3RvKHNvdXJjZSwgcHJvcCk7XG4gIHJldHVybiBkZXNjID8gYHZhbHVlYCBpbiBkZXNjID8gZGVzYy52YWx1ZSA6IChcbiAgICAvLyBUaGlzIGlzIGEgdmVyeSBzcGVjaWFsIGNhc2UsIGlmIHRoZSBwcm9wIGlzIGEgZ2V0dGVyIGRlZmluZWQgYnkgdGhlXG4gICAgLy8gcHJvdG90eXBlLCB3ZSBzaG91bGQgaW52b2tlIGl0IHdpdGggdGhlIGRyYWZ0IGFzIGNvbnRleHQhXG4gICAgZGVzYy5nZXQ/LmNhbGwoc3RhdGUuZHJhZnRfKVxuICApIDogdm9pZCAwO1xufVxuZnVuY3Rpb24gZ2V0RGVzY3JpcHRvckZyb21Qcm90byhzb3VyY2UsIHByb3ApIHtcbiAgaWYgKCEocHJvcCBpbiBzb3VyY2UpKVxuICAgIHJldHVybiB2b2lkIDA7XG4gIGxldCBwcm90byA9IGdldFByb3RvdHlwZU9mKHNvdXJjZSk7XG4gIHdoaWxlIChwcm90bykge1xuICAgIGNvbnN0IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHByb3RvLCBwcm9wKTtcbiAgICBpZiAoZGVzYylcbiAgICAgIHJldHVybiBkZXNjO1xuICAgIHByb3RvID0gZ2V0UHJvdG90eXBlT2YocHJvdG8pO1xuICB9XG4gIHJldHVybiB2b2lkIDA7XG59XG5mdW5jdGlvbiBtYXJrQ2hhbmdlZChzdGF0ZSkge1xuICBpZiAoIXN0YXRlLm1vZGlmaWVkXykge1xuICAgIHN0YXRlLm1vZGlmaWVkXyA9IHRydWU7XG4gICAgaWYgKHN0YXRlLnBhcmVudF8pIHtcbiAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlLnBhcmVudF8pO1xuICAgIH1cbiAgfVxufVxuZnVuY3Rpb24gcHJlcGFyZUNvcHkoc3RhdGUpIHtcbiAgaWYgKCFzdGF0ZS5jb3B5Xykge1xuICAgIHN0YXRlLmNvcHlfID0gc2hhbGxvd0NvcHkoXG4gICAgICBzdGF0ZS5iYXNlXyxcbiAgICAgIHN0YXRlLnNjb3BlXy5pbW1lcl8udXNlU3RyaWN0U2hhbGxvd0NvcHlfXG4gICAgKTtcbiAgfVxufVxuXG4vLyBzcmMvY29yZS9pbW1lckNsYXNzLnRzXG52YXIgSW1tZXIyID0gY2xhc3Mge1xuICBjb25zdHJ1Y3Rvcihjb25maWcpIHtcbiAgICB0aGlzLmF1dG9GcmVlemVfID0gdHJ1ZTtcbiAgICB0aGlzLnVzZVN0cmljdFNoYWxsb3dDb3B5XyA9IGZhbHNlO1xuICAgIC8qKlxuICAgICAqIFRoZSBgcHJvZHVjZWAgZnVuY3Rpb24gdGFrZXMgYSB2YWx1ZSBhbmQgYSBcInJlY2lwZSBmdW5jdGlvblwiICh3aG9zZVxuICAgICAqIHJldHVybiB2YWx1ZSBvZnRlbiBkZXBlbmRzIG9uIHRoZSBiYXNlIHN0YXRlKS4gVGhlIHJlY2lwZSBmdW5jdGlvbiBpc1xuICAgICAqIGZyZWUgdG8gbXV0YXRlIGl0cyBmaXJzdCBhcmd1bWVudCBob3dldmVyIGl0IHdhbnRzLiBBbGwgbXV0YXRpb25zIGFyZVxuICAgICAqIG9ubHkgZXZlciBhcHBsaWVkIHRvIGEgX19jb3B5X18gb2YgdGhlIGJhc2Ugc3RhdGUuXG4gICAgICpcbiAgICAgKiBQYXNzIG9ubHkgYSBmdW5jdGlvbiB0byBjcmVhdGUgYSBcImN1cnJpZWQgcHJvZHVjZXJcIiB3aGljaCByZWxpZXZlcyB5b3VcbiAgICAgKiBmcm9tIHBhc3NpbmcgdGhlIHJlY2lwZSBmdW5jdGlvbiBldmVyeSB0aW1lLlxuICAgICAqXG4gICAgICogT25seSBwbGFpbiBvYmplY3RzIGFuZCBhcnJheXMgYXJlIG1hZGUgbXV0YWJsZS4gQWxsIG90aGVyIG9iamVjdHMgYXJlXG4gICAgICogY29uc2lkZXJlZCB1bmNvcHlhYmxlLlxuICAgICAqXG4gICAgICogTm90ZTogVGhpcyBmdW5jdGlvbiBpcyBfX2JvdW5kX18gdG8gaXRzIGBJbW1lcmAgaW5zdGFuY2UuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge2FueX0gYmFzZSAtIHRoZSBpbml0aWFsIHN0YXRlXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcmVjaXBlIC0gZnVuY3Rpb24gdGhhdCByZWNlaXZlcyBhIHByb3h5IG9mIHRoZSBiYXNlIHN0YXRlIGFzIGZpcnN0IGFyZ3VtZW50IGFuZCB3aGljaCBjYW4gYmUgZnJlZWx5IG1vZGlmaWVkXG4gICAgICogQHBhcmFtIHtGdW5jdGlvbn0gcGF0Y2hMaXN0ZW5lciAtIG9wdGlvbmFsIGZ1bmN0aW9uIHRoYXQgd2lsbCBiZSBjYWxsZWQgd2l0aCBhbGwgdGhlIHBhdGNoZXMgcHJvZHVjZWQgaGVyZVxuICAgICAqIEByZXR1cm5zIHthbnl9IGEgbmV3IHN0YXRlLCBvciB0aGUgaW5pdGlhbCBzdGF0ZSBpZiBub3RoaW5nIHdhcyBtb2RpZmllZFxuICAgICAqL1xuICAgIHRoaXMucHJvZHVjZSA9IChiYXNlLCByZWNpcGUsIHBhdGNoTGlzdGVuZXIpID0+IHtcbiAgICAgIGlmICh0eXBlb2YgYmFzZSA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiByZWNpcGUgIT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICBjb25zdCBkZWZhdWx0QmFzZSA9IHJlY2lwZTtcbiAgICAgICAgcmVjaXBlID0gYmFzZTtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHJldHVybiBmdW5jdGlvbiBjdXJyaWVkUHJvZHVjZShiYXNlMiA9IGRlZmF1bHRCYXNlLCAuLi5hcmdzKSB7XG4gICAgICAgICAgcmV0dXJuIHNlbGYucHJvZHVjZShiYXNlMiwgKGRyYWZ0KSA9PiByZWNpcGUuY2FsbCh0aGlzLCBkcmFmdCwgLi4uYXJncykpO1xuICAgICAgICB9O1xuICAgICAgfVxuICAgICAgaWYgKHR5cGVvZiByZWNpcGUgIT09IFwiZnVuY3Rpb25cIilcbiAgICAgICAgZGllKDYpO1xuICAgICAgaWYgKHBhdGNoTGlzdGVuZXIgIT09IHZvaWQgMCAmJiB0eXBlb2YgcGF0Y2hMaXN0ZW5lciAhPT0gXCJmdW5jdGlvblwiKVxuICAgICAgICBkaWUoNyk7XG4gICAgICBsZXQgcmVzdWx0O1xuICAgICAgaWYgKGlzRHJhZnRhYmxlKGJhc2UpKSB7XG4gICAgICAgIGNvbnN0IHNjb3BlID0gZW50ZXJTY29wZSh0aGlzKTtcbiAgICAgICAgY29uc3QgcHJveHkgPSBjcmVhdGVQcm94eShiYXNlLCB2b2lkIDApO1xuICAgICAgICBsZXQgaGFzRXJyb3IgPSB0cnVlO1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHJlc3VsdCA9IHJlY2lwZShwcm94eSk7XG4gICAgICAgICAgaGFzRXJyb3IgPSBmYWxzZTtcbiAgICAgICAgfSBmaW5hbGx5IHtcbiAgICAgICAgICBpZiAoaGFzRXJyb3IpXG4gICAgICAgICAgICByZXZva2VTY29wZShzY29wZSk7XG4gICAgICAgICAgZWxzZVxuICAgICAgICAgICAgbGVhdmVTY29wZShzY29wZSk7XG4gICAgICAgIH1cbiAgICAgICAgdXNlUGF0Y2hlc0luU2NvcGUoc2NvcGUsIHBhdGNoTGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gcHJvY2Vzc1Jlc3VsdChyZXN1bHQsIHNjb3BlKTtcbiAgICAgIH0gZWxzZSBpZiAoIWJhc2UgfHwgdHlwZW9mIGJhc2UgIT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgcmVzdWx0ID0gcmVjaXBlKGJhc2UpO1xuICAgICAgICBpZiAocmVzdWx0ID09PSB2b2lkIDApXG4gICAgICAgICAgcmVzdWx0ID0gYmFzZTtcbiAgICAgICAgaWYgKHJlc3VsdCA9PT0gTk9USElORylcbiAgICAgICAgICByZXN1bHQgPSB2b2lkIDA7XG4gICAgICAgIGlmICh0aGlzLmF1dG9GcmVlemVfKVxuICAgICAgICAgIGZyZWV6ZShyZXN1bHQsIHRydWUpO1xuICAgICAgICBpZiAocGF0Y2hMaXN0ZW5lcikge1xuICAgICAgICAgIGNvbnN0IHAgPSBbXTtcbiAgICAgICAgICBjb25zdCBpcCA9IFtdO1xuICAgICAgICAgIGdldFBsdWdpbihcIlBhdGNoZXNcIikuZ2VuZXJhdGVSZXBsYWNlbWVudFBhdGNoZXNfKGJhc2UsIHJlc3VsdCwgcCwgaXApO1xuICAgICAgICAgIHBhdGNoTGlzdGVuZXIocCwgaXApO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByZXN1bHQ7XG4gICAgICB9IGVsc2VcbiAgICAgICAgZGllKDEsIGJhc2UpO1xuICAgIH07XG4gICAgdGhpcy5wcm9kdWNlV2l0aFBhdGNoZXMgPSAoYmFzZSwgcmVjaXBlKSA9PiB7XG4gICAgICBpZiAodHlwZW9mIGJhc2UgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgICByZXR1cm4gKHN0YXRlLCAuLi5hcmdzKSA9PiB0aGlzLnByb2R1Y2VXaXRoUGF0Y2hlcyhzdGF0ZSwgKGRyYWZ0KSA9PiBiYXNlKGRyYWZ0LCAuLi5hcmdzKSk7XG4gICAgICB9XG4gICAgICBsZXQgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXM7XG4gICAgICBjb25zdCByZXN1bHQgPSB0aGlzLnByb2R1Y2UoYmFzZSwgcmVjaXBlLCAocCwgaXApID0+IHtcbiAgICAgICAgcGF0Y2hlcyA9IHA7XG4gICAgICAgIGludmVyc2VQYXRjaGVzID0gaXA7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBbcmVzdWx0LCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlc107XG4gICAgfTtcbiAgICBpZiAodHlwZW9mIGNvbmZpZz8uYXV0b0ZyZWV6ZSA9PT0gXCJib29sZWFuXCIpXG4gICAgICB0aGlzLnNldEF1dG9GcmVlemUoY29uZmlnLmF1dG9GcmVlemUpO1xuICAgIGlmICh0eXBlb2YgY29uZmlnPy51c2VTdHJpY3RTaGFsbG93Q29weSA9PT0gXCJib29sZWFuXCIpXG4gICAgICB0aGlzLnNldFVzZVN0cmljdFNoYWxsb3dDb3B5KGNvbmZpZy51c2VTdHJpY3RTaGFsbG93Q29weSk7XG4gIH1cbiAgY3JlYXRlRHJhZnQoYmFzZSkge1xuICAgIGlmICghaXNEcmFmdGFibGUoYmFzZSkpXG4gICAgICBkaWUoOCk7XG4gICAgaWYgKGlzRHJhZnQoYmFzZSkpXG4gICAgICBiYXNlID0gY3VycmVudChiYXNlKTtcbiAgICBjb25zdCBzY29wZSA9IGVudGVyU2NvcGUodGhpcyk7XG4gICAgY29uc3QgcHJveHkgPSBjcmVhdGVQcm94eShiYXNlLCB2b2lkIDApO1xuICAgIHByb3h5W0RSQUZUX1NUQVRFXS5pc01hbnVhbF8gPSB0cnVlO1xuICAgIGxlYXZlU2NvcGUoc2NvcGUpO1xuICAgIHJldHVybiBwcm94eTtcbiAgfVxuICBmaW5pc2hEcmFmdChkcmFmdCwgcGF0Y2hMaXN0ZW5lcikge1xuICAgIGNvbnN0IHN0YXRlID0gZHJhZnQgJiYgZHJhZnRbRFJBRlRfU1RBVEVdO1xuICAgIGlmICghc3RhdGUgfHwgIXN0YXRlLmlzTWFudWFsXylcbiAgICAgIGRpZSg5KTtcbiAgICBjb25zdCB7IHNjb3BlXzogc2NvcGUgfSA9IHN0YXRlO1xuICAgIHVzZVBhdGNoZXNJblNjb3BlKHNjb3BlLCBwYXRjaExpc3RlbmVyKTtcbiAgICByZXR1cm4gcHJvY2Vzc1Jlc3VsdCh2b2lkIDAsIHNjb3BlKTtcbiAgfVxuICAvKipcbiAgICogUGFzcyB0cnVlIHRvIGF1dG9tYXRpY2FsbHkgZnJlZXplIGFsbCBjb3BpZXMgY3JlYXRlZCBieSBJbW1lci5cbiAgICpcbiAgICogQnkgZGVmYXVsdCwgYXV0by1mcmVlemluZyBpcyBlbmFibGVkLlxuICAgKi9cbiAgc2V0QXV0b0ZyZWV6ZSh2YWx1ZSkge1xuICAgIHRoaXMuYXV0b0ZyZWV6ZV8gPSB2YWx1ZTtcbiAgfVxuICAvKipcbiAgICogUGFzcyB0cnVlIHRvIGVuYWJsZSBzdHJpY3Qgc2hhbGxvdyBjb3B5LlxuICAgKlxuICAgKiBCeSBkZWZhdWx0LCBpbW1lciBkb2VzIG5vdCBjb3B5IHRoZSBvYmplY3QgZGVzY3JpcHRvcnMgc3VjaCBhcyBnZXR0ZXIsIHNldHRlciBhbmQgbm9uLWVudW1yYWJsZSBwcm9wZXJ0aWVzLlxuICAgKi9cbiAgc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkodmFsdWUpIHtcbiAgICB0aGlzLnVzZVN0cmljdFNoYWxsb3dDb3B5XyA9IHZhbHVlO1xuICB9XG4gIGFwcGx5UGF0Y2hlcyhiYXNlLCBwYXRjaGVzKSB7XG4gICAgbGV0IGk7XG4gICAgZm9yIChpID0gcGF0Y2hlcy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkge1xuICAgICAgY29uc3QgcGF0Y2ggPSBwYXRjaGVzW2ldO1xuICAgICAgaWYgKHBhdGNoLnBhdGgubGVuZ3RoID09PSAwICYmIHBhdGNoLm9wID09PSBcInJlcGxhY2VcIikge1xuICAgICAgICBiYXNlID0gcGF0Y2gudmFsdWU7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaSA+IC0xKSB7XG4gICAgICBwYXRjaGVzID0gcGF0Y2hlcy5zbGljZShpICsgMSk7XG4gICAgfVxuICAgIGNvbnN0IGFwcGx5UGF0Y2hlc0ltcGwgPSBnZXRQbHVnaW4oXCJQYXRjaGVzXCIpLmFwcGx5UGF0Y2hlc187XG4gICAgaWYgKGlzRHJhZnQoYmFzZSkpIHtcbiAgICAgIHJldHVybiBhcHBseVBhdGNoZXNJbXBsKGJhc2UsIHBhdGNoZXMpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm9kdWNlKFxuICAgICAgYmFzZSxcbiAgICAgIChkcmFmdCkgPT4gYXBwbHlQYXRjaGVzSW1wbChkcmFmdCwgcGF0Y2hlcylcbiAgICApO1xuICB9XG59O1xuZnVuY3Rpb24gY3JlYXRlUHJveHkodmFsdWUsIHBhcmVudCkge1xuICBjb25zdCBkcmFmdCA9IGlzTWFwKHZhbHVlKSA/IGdldFBsdWdpbihcIk1hcFNldFwiKS5wcm94eU1hcF8odmFsdWUsIHBhcmVudCkgOiBpc1NldCh2YWx1ZSkgPyBnZXRQbHVnaW4oXCJNYXBTZXRcIikucHJveHlTZXRfKHZhbHVlLCBwYXJlbnQpIDogY3JlYXRlUHJveHlQcm94eSh2YWx1ZSwgcGFyZW50KTtcbiAgY29uc3Qgc2NvcGUgPSBwYXJlbnQgPyBwYXJlbnQuc2NvcGVfIDogZ2V0Q3VycmVudFNjb3BlKCk7XG4gIHNjb3BlLmRyYWZ0c18ucHVzaChkcmFmdCk7XG4gIHJldHVybiBkcmFmdDtcbn1cblxuLy8gc3JjL2NvcmUvY3VycmVudC50c1xuZnVuY3Rpb24gY3VycmVudCh2YWx1ZSkge1xuICBpZiAoIWlzRHJhZnQodmFsdWUpKVxuICAgIGRpZSgxMCwgdmFsdWUpO1xuICByZXR1cm4gY3VycmVudEltcGwodmFsdWUpO1xufVxuZnVuY3Rpb24gY3VycmVudEltcGwodmFsdWUpIHtcbiAgaWYgKCFpc0RyYWZ0YWJsZSh2YWx1ZSkgfHwgaXNGcm96ZW4odmFsdWUpKVxuICAgIHJldHVybiB2YWx1ZTtcbiAgY29uc3Qgc3RhdGUgPSB2YWx1ZVtEUkFGVF9TVEFURV07XG4gIGxldCBjb3B5O1xuICBpZiAoc3RhdGUpIHtcbiAgICBpZiAoIXN0YXRlLm1vZGlmaWVkXylcbiAgICAgIHJldHVybiBzdGF0ZS5iYXNlXztcbiAgICBzdGF0ZS5maW5hbGl6ZWRfID0gdHJ1ZTtcbiAgICBjb3B5ID0gc2hhbGxvd0NvcHkodmFsdWUsIHN0YXRlLnNjb3BlXy5pbW1lcl8udXNlU3RyaWN0U2hhbGxvd0NvcHlfKTtcbiAgfSBlbHNlIHtcbiAgICBjb3B5ID0gc2hhbGxvd0NvcHkodmFsdWUsIHRydWUpO1xuICB9XG4gIGVhY2goY29weSwgKGtleSwgY2hpbGRWYWx1ZSkgPT4ge1xuICAgIHNldChjb3B5LCBrZXksIGN1cnJlbnRJbXBsKGNoaWxkVmFsdWUpKTtcbiAgfSk7XG4gIGlmIChzdGF0ZSkge1xuICAgIHN0YXRlLmZpbmFsaXplZF8gPSBmYWxzZTtcbiAgfVxuICByZXR1cm4gY29weTtcbn1cblxuLy8gc3JjL3BsdWdpbnMvcGF0Y2hlcy50c1xuZnVuY3Rpb24gZW5hYmxlUGF0Y2hlcygpIHtcbiAgY29uc3QgZXJyb3JPZmZzZXQgPSAxNjtcbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIikge1xuICAgIGVycm9ycy5wdXNoKFxuICAgICAgJ1NldHMgY2Fubm90IGhhdmUgXCJyZXBsYWNlXCIgcGF0Y2hlcy4nLFxuICAgICAgZnVuY3Rpb24ob3ApIHtcbiAgICAgICAgcmV0dXJuIFwiVW5zdXBwb3J0ZWQgcGF0Y2ggb3BlcmF0aW9uOiBcIiArIG9wO1xuICAgICAgfSxcbiAgICAgIGZ1bmN0aW9uKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIFwiQ2Fubm90IGFwcGx5IHBhdGNoLCBwYXRoIGRvZXNuJ3QgcmVzb2x2ZTogXCIgKyBwYXRoO1xuICAgICAgfSxcbiAgICAgIFwiUGF0Y2hpbmcgcmVzZXJ2ZWQgYXR0cmlidXRlcyBsaWtlIF9fcHJvdG9fXywgcHJvdG90eXBlIGFuZCBjb25zdHJ1Y3RvciBpcyBub3QgYWxsb3dlZFwiXG4gICAgKTtcbiAgfVxuICBjb25zdCBSRVBMQUNFID0gXCJyZXBsYWNlXCI7XG4gIGNvbnN0IEFERCA9IFwiYWRkXCI7XG4gIGNvbnN0IFJFTU9WRSA9IFwicmVtb3ZlXCI7XG4gIGZ1bmN0aW9uIGdlbmVyYXRlUGF0Y2hlc18oc3RhdGUsIGJhc2VQYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykge1xuICAgIHN3aXRjaCAoc3RhdGUudHlwZV8pIHtcbiAgICAgIGNhc2UgMCAvKiBPYmplY3QgKi86XG4gICAgICBjYXNlIDIgLyogTWFwICovOlxuICAgICAgICByZXR1cm4gZ2VuZXJhdGVQYXRjaGVzRnJvbUFzc2lnbmVkKFxuICAgICAgICAgIHN0YXRlLFxuICAgICAgICAgIGJhc2VQYXRoLFxuICAgICAgICAgIHBhdGNoZXMsXG4gICAgICAgICAgaW52ZXJzZVBhdGNoZXNcbiAgICAgICAgKTtcbiAgICAgIGNhc2UgMSAvKiBBcnJheSAqLzpcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlQXJyYXlQYXRjaGVzKHN0YXRlLCBiYXNlUGF0aCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpO1xuICAgICAgY2FzZSAzIC8qIFNldCAqLzpcbiAgICAgICAgcmV0dXJuIGdlbmVyYXRlU2V0UGF0Y2hlcyhcbiAgICAgICAgICBzdGF0ZSxcbiAgICAgICAgICBiYXNlUGF0aCxcbiAgICAgICAgICBwYXRjaGVzLFxuICAgICAgICAgIGludmVyc2VQYXRjaGVzXG4gICAgICAgICk7XG4gICAgfVxuICB9XG4gIGZ1bmN0aW9uIGdlbmVyYXRlQXJyYXlQYXRjaGVzKHN0YXRlLCBiYXNlUGF0aCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpIHtcbiAgICBsZXQgeyBiYXNlXywgYXNzaWduZWRfIH0gPSBzdGF0ZTtcbiAgICBsZXQgY29weV8gPSBzdGF0ZS5jb3B5XztcbiAgICBpZiAoY29weV8ubGVuZ3RoIDwgYmFzZV8ubGVuZ3RoKSB7XG4gICAgICA7XG4gICAgICBbYmFzZV8sIGNvcHlfXSA9IFtjb3B5XywgYmFzZV9dO1xuICAgICAgW3BhdGNoZXMsIGludmVyc2VQYXRjaGVzXSA9IFtpbnZlcnNlUGF0Y2hlcywgcGF0Y2hlc107XG4gICAgfVxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmFzZV8ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChhc3NpZ25lZF9baV0gJiYgY29weV9baV0gIT09IGJhc2VfW2ldKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBiYXNlUGF0aC5jb25jYXQoW2ldKTtcbiAgICAgICAgcGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICBvcDogUkVQTEFDRSxcbiAgICAgICAgICBwYXRoLFxuICAgICAgICAgIC8vIE5lZWQgdG8gbWF5YmUgY2xvbmUgaXQsIGFzIGl0IGNhbiBpbiBmYWN0IGJlIHRoZSBvcmlnaW5hbCB2YWx1ZVxuICAgICAgICAgIC8vIGR1ZSB0byB0aGUgYmFzZS9jb3B5IGludmVyc2lvbiBhdCB0aGUgc3RhcnQgb2YgdGhpcyBmdW5jdGlvblxuICAgICAgICAgIHZhbHVlOiBjbG9uZVBhdGNoVmFsdWVJZk5lZWRlZChjb3B5X1tpXSlcbiAgICAgICAgfSk7XG4gICAgICAgIGludmVyc2VQYXRjaGVzLnB1c2goe1xuICAgICAgICAgIG9wOiBSRVBMQUNFLFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgdmFsdWU6IGNsb25lUGF0Y2hWYWx1ZUlmTmVlZGVkKGJhc2VfW2ldKVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChsZXQgaSA9IGJhc2VfLmxlbmd0aDsgaSA8IGNvcHlfLmxlbmd0aDsgaSsrKSB7XG4gICAgICBjb25zdCBwYXRoID0gYmFzZVBhdGguY29uY2F0KFtpXSk7XG4gICAgICBwYXRjaGVzLnB1c2goe1xuICAgICAgICBvcDogQURELFxuICAgICAgICBwYXRoLFxuICAgICAgICAvLyBOZWVkIHRvIG1heWJlIGNsb25lIGl0LCBhcyBpdCBjYW4gaW4gZmFjdCBiZSB0aGUgb3JpZ2luYWwgdmFsdWVcbiAgICAgICAgLy8gZHVlIHRvIHRoZSBiYXNlL2NvcHkgaW52ZXJzaW9uIGF0IHRoZSBzdGFydCBvZiB0aGlzIGZ1bmN0aW9uXG4gICAgICAgIHZhbHVlOiBjbG9uZVBhdGNoVmFsdWVJZk5lZWRlZChjb3B5X1tpXSlcbiAgICAgIH0pO1xuICAgIH1cbiAgICBmb3IgKGxldCBpID0gY29weV8ubGVuZ3RoIC0gMTsgYmFzZV8ubGVuZ3RoIDw9IGk7IC0taSkge1xuICAgICAgY29uc3QgcGF0aCA9IGJhc2VQYXRoLmNvbmNhdChbaV0pO1xuICAgICAgaW52ZXJzZVBhdGNoZXMucHVzaCh7XG4gICAgICAgIG9wOiBSRU1PVkUsXG4gICAgICAgIHBhdGhcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBnZW5lcmF0ZVBhdGNoZXNGcm9tQXNzaWduZWQoc3RhdGUsIGJhc2VQYXRoLCBwYXRjaGVzLCBpbnZlcnNlUGF0Y2hlcykge1xuICAgIGNvbnN0IHsgYmFzZV8sIGNvcHlfIH0gPSBzdGF0ZTtcbiAgICBlYWNoKHN0YXRlLmFzc2lnbmVkXywgKGtleSwgYXNzaWduZWRWYWx1ZSkgPT4ge1xuICAgICAgY29uc3Qgb3JpZ1ZhbHVlID0gZ2V0KGJhc2VfLCBrZXkpO1xuICAgICAgY29uc3QgdmFsdWUgPSBnZXQoY29weV8sIGtleSk7XG4gICAgICBjb25zdCBvcCA9ICFhc3NpZ25lZFZhbHVlID8gUkVNT1ZFIDogaGFzKGJhc2VfLCBrZXkpID8gUkVQTEFDRSA6IEFERDtcbiAgICAgIGlmIChvcmlnVmFsdWUgPT09IHZhbHVlICYmIG9wID09PSBSRVBMQUNFKVxuICAgICAgICByZXR1cm47XG4gICAgICBjb25zdCBwYXRoID0gYmFzZVBhdGguY29uY2F0KGtleSk7XG4gICAgICBwYXRjaGVzLnB1c2gob3AgPT09IFJFTU9WRSA/IHsgb3AsIHBhdGggfSA6IHsgb3AsIHBhdGgsIHZhbHVlIH0pO1xuICAgICAgaW52ZXJzZVBhdGNoZXMucHVzaChcbiAgICAgICAgb3AgPT09IEFERCA/IHsgb3A6IFJFTU9WRSwgcGF0aCB9IDogb3AgPT09IFJFTU9WRSA/IHsgb3A6IEFERCwgcGF0aCwgdmFsdWU6IGNsb25lUGF0Y2hWYWx1ZUlmTmVlZGVkKG9yaWdWYWx1ZSkgfSA6IHsgb3A6IFJFUExBQ0UsIHBhdGgsIHZhbHVlOiBjbG9uZVBhdGNoVmFsdWVJZk5lZWRlZChvcmlnVmFsdWUpIH1cbiAgICAgICk7XG4gICAgfSk7XG4gIH1cbiAgZnVuY3Rpb24gZ2VuZXJhdGVTZXRQYXRjaGVzKHN0YXRlLCBiYXNlUGF0aCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpIHtcbiAgICBsZXQgeyBiYXNlXywgY29weV8gfSA9IHN0YXRlO1xuICAgIGxldCBpID0gMDtcbiAgICBiYXNlXy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKCFjb3B5Xy5oYXModmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBiYXNlUGF0aC5jb25jYXQoW2ldKTtcbiAgICAgICAgcGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICBvcDogUkVNT1ZFLFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIGludmVyc2VQYXRjaGVzLnVuc2hpZnQoe1xuICAgICAgICAgIG9wOiBBREQsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9KTtcbiAgICBpID0gMDtcbiAgICBjb3B5Xy5mb3JFYWNoKCh2YWx1ZSkgPT4ge1xuICAgICAgaWYgKCFiYXNlXy5oYXModmFsdWUpKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBiYXNlUGF0aC5jb25jYXQoW2ldKTtcbiAgICAgICAgcGF0Y2hlcy5wdXNoKHtcbiAgICAgICAgICBvcDogQURELFxuICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgdmFsdWVcbiAgICAgICAgfSk7XG4gICAgICAgIGludmVyc2VQYXRjaGVzLnVuc2hpZnQoe1xuICAgICAgICAgIG9wOiBSRU1PVkUsXG4gICAgICAgICAgcGF0aCxcbiAgICAgICAgICB2YWx1ZVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9KTtcbiAgfVxuICBmdW5jdGlvbiBnZW5lcmF0ZVJlcGxhY2VtZW50UGF0Y2hlc18oYmFzZVZhbHVlLCByZXBsYWNlbWVudCwgcGF0Y2hlcywgaW52ZXJzZVBhdGNoZXMpIHtcbiAgICBwYXRjaGVzLnB1c2goe1xuICAgICAgb3A6IFJFUExBQ0UsXG4gICAgICBwYXRoOiBbXSxcbiAgICAgIHZhbHVlOiByZXBsYWNlbWVudCA9PT0gTk9USElORyA/IHZvaWQgMCA6IHJlcGxhY2VtZW50XG4gICAgfSk7XG4gICAgaW52ZXJzZVBhdGNoZXMucHVzaCh7XG4gICAgICBvcDogUkVQTEFDRSxcbiAgICAgIHBhdGg6IFtdLFxuICAgICAgdmFsdWU6IGJhc2VWYWx1ZVxuICAgIH0pO1xuICB9XG4gIGZ1bmN0aW9uIGFwcGx5UGF0Y2hlc18oZHJhZnQsIHBhdGNoZXMpIHtcbiAgICBwYXRjaGVzLmZvckVhY2goKHBhdGNoKSA9PiB7XG4gICAgICBjb25zdCB7IHBhdGgsIG9wIH0gPSBwYXRjaDtcbiAgICAgIGxldCBiYXNlID0gZHJhZnQ7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHBhdGgubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgICAgIGNvbnN0IHBhcmVudFR5cGUgPSBnZXRBcmNodHlwZShiYXNlKTtcbiAgICAgICAgbGV0IHAgPSBwYXRoW2ldO1xuICAgICAgICBpZiAodHlwZW9mIHAgIT09IFwic3RyaW5nXCIgJiYgdHlwZW9mIHAgIT09IFwibnVtYmVyXCIpIHtcbiAgICAgICAgICBwID0gXCJcIiArIHA7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKChwYXJlbnRUeXBlID09PSAwIC8qIE9iamVjdCAqLyB8fCBwYXJlbnRUeXBlID09PSAxIC8qIEFycmF5ICovKSAmJiAocCA9PT0gXCJfX3Byb3RvX19cIiB8fCBwID09PSBcImNvbnN0cnVjdG9yXCIpKVxuICAgICAgICAgIGRpZShlcnJvck9mZnNldCArIDMpO1xuICAgICAgICBpZiAodHlwZW9mIGJhc2UgPT09IFwiZnVuY3Rpb25cIiAmJiBwID09PSBcInByb3RvdHlwZVwiKVxuICAgICAgICAgIGRpZShlcnJvck9mZnNldCArIDMpO1xuICAgICAgICBiYXNlID0gZ2V0KGJhc2UsIHApO1xuICAgICAgICBpZiAodHlwZW9mIGJhc2UgIT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgZGllKGVycm9yT2Zmc2V0ICsgMiwgcGF0aC5qb2luKFwiL1wiKSk7XG4gICAgICB9XG4gICAgICBjb25zdCB0eXBlID0gZ2V0QXJjaHR5cGUoYmFzZSk7XG4gICAgICBjb25zdCB2YWx1ZSA9IGRlZXBDbG9uZVBhdGNoVmFsdWUocGF0Y2gudmFsdWUpO1xuICAgICAgY29uc3Qga2V5ID0gcGF0aFtwYXRoLmxlbmd0aCAtIDFdO1xuICAgICAgc3dpdGNoIChvcCkge1xuICAgICAgICBjYXNlIFJFUExBQ0U6XG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIDIgLyogTWFwICovOlxuICAgICAgICAgICAgICByZXR1cm4gYmFzZS5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICBjYXNlIDMgLyogU2V0ICovOlxuICAgICAgICAgICAgICBkaWUoZXJyb3JPZmZzZXQpO1xuICAgICAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2Vba2V5XSA9IHZhbHVlO1xuICAgICAgICAgIH1cbiAgICAgICAgY2FzZSBBREQ6XG4gICAgICAgICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICAgICAgICBjYXNlIDEgLyogQXJyYXkgKi86XG4gICAgICAgICAgICAgIHJldHVybiBrZXkgPT09IFwiLVwiID8gYmFzZS5wdXNoKHZhbHVlKSA6IGJhc2Uuc3BsaWNlKGtleSwgMCwgdmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAyIC8qIE1hcCAqLzpcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2Uuc2V0KGtleSwgdmFsdWUpO1xuICAgICAgICAgICAgY2FzZSAzIC8qIFNldCAqLzpcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2UuYWRkKHZhbHVlKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlW2tleV0gPSB2YWx1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIGNhc2UgUkVNT1ZFOlxuICAgICAgICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICAgICAgY2FzZSAxIC8qIEFycmF5ICovOlxuICAgICAgICAgICAgICByZXR1cm4gYmFzZS5zcGxpY2Uoa2V5LCAxKTtcbiAgICAgICAgICAgIGNhc2UgMiAvKiBNYXAgKi86XG4gICAgICAgICAgICAgIHJldHVybiBiYXNlLmRlbGV0ZShrZXkpO1xuICAgICAgICAgICAgY2FzZSAzIC8qIFNldCAqLzpcbiAgICAgICAgICAgICAgcmV0dXJuIGJhc2UuZGVsZXRlKHBhdGNoLnZhbHVlKTtcbiAgICAgICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgICAgIHJldHVybiBkZWxldGUgYmFzZVtrZXldO1xuICAgICAgICAgIH1cbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICBkaWUoZXJyb3JPZmZzZXQgKyAxLCBvcCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIGRyYWZ0O1xuICB9XG4gIGZ1bmN0aW9uIGRlZXBDbG9uZVBhdGNoVmFsdWUob2JqKSB7XG4gICAgaWYgKCFpc0RyYWZ0YWJsZShvYmopKVxuICAgICAgcmV0dXJuIG9iajtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShvYmopKVxuICAgICAgcmV0dXJuIG9iai5tYXAoZGVlcENsb25lUGF0Y2hWYWx1ZSk7XG4gICAgaWYgKGlzTWFwKG9iaikpXG4gICAgICByZXR1cm4gbmV3IE1hcChcbiAgICAgICAgQXJyYXkuZnJvbShvYmouZW50cmllcygpKS5tYXAoKFtrLCB2XSkgPT4gW2ssIGRlZXBDbG9uZVBhdGNoVmFsdWUodildKVxuICAgICAgKTtcbiAgICBpZiAoaXNTZXQob2JqKSlcbiAgICAgIHJldHVybiBuZXcgU2V0KEFycmF5LmZyb20ob2JqKS5tYXAoZGVlcENsb25lUGF0Y2hWYWx1ZSkpO1xuICAgIGNvbnN0IGNsb25lZCA9IE9iamVjdC5jcmVhdGUoZ2V0UHJvdG90eXBlT2Yob2JqKSk7XG4gICAgZm9yIChjb25zdCBrZXkgaW4gb2JqKVxuICAgICAgY2xvbmVkW2tleV0gPSBkZWVwQ2xvbmVQYXRjaFZhbHVlKG9ialtrZXldKTtcbiAgICBpZiAoaGFzKG9iaiwgRFJBRlRBQkxFKSlcbiAgICAgIGNsb25lZFtEUkFGVEFCTEVdID0gb2JqW0RSQUZUQUJMRV07XG4gICAgcmV0dXJuIGNsb25lZDtcbiAgfVxuICBmdW5jdGlvbiBjbG9uZVBhdGNoVmFsdWVJZk5lZWRlZChvYmopIHtcbiAgICBpZiAoaXNEcmFmdChvYmopKSB7XG4gICAgICByZXR1cm4gZGVlcENsb25lUGF0Y2hWYWx1ZShvYmopO1xuICAgIH0gZWxzZVxuICAgICAgcmV0dXJuIG9iajtcbiAgfVxuICBsb2FkUGx1Z2luKFwiUGF0Y2hlc1wiLCB7XG4gICAgYXBwbHlQYXRjaGVzXyxcbiAgICBnZW5lcmF0ZVBhdGNoZXNfLFxuICAgIGdlbmVyYXRlUmVwbGFjZW1lbnRQYXRjaGVzX1xuICB9KTtcbn1cblxuLy8gc3JjL3BsdWdpbnMvbWFwc2V0LnRzXG5mdW5jdGlvbiBlbmFibGVNYXBTZXQoKSB7XG4gIGNsYXNzIERyYWZ0TWFwIGV4dGVuZHMgTWFwIHtcbiAgICBjb25zdHJ1Y3Rvcih0YXJnZXQsIHBhcmVudCkge1xuICAgICAgc3VwZXIoKTtcbiAgICAgIHRoaXNbRFJBRlRfU1RBVEVdID0ge1xuICAgICAgICB0eXBlXzogMiAvKiBNYXAgKi8sXG4gICAgICAgIHBhcmVudF86IHBhcmVudCxcbiAgICAgICAgc2NvcGVfOiBwYXJlbnQgPyBwYXJlbnQuc2NvcGVfIDogZ2V0Q3VycmVudFNjb3BlKCksXG4gICAgICAgIG1vZGlmaWVkXzogZmFsc2UsXG4gICAgICAgIGZpbmFsaXplZF86IGZhbHNlLFxuICAgICAgICBjb3B5Xzogdm9pZCAwLFxuICAgICAgICBhc3NpZ25lZF86IHZvaWQgMCxcbiAgICAgICAgYmFzZV86IHRhcmdldCxcbiAgICAgICAgZHJhZnRfOiB0aGlzLFxuICAgICAgICBpc01hbnVhbF86IGZhbHNlLFxuICAgICAgICByZXZva2VkXzogZmFsc2VcbiAgICAgIH07XG4gICAgfVxuICAgIGdldCBzaXplKCkge1xuICAgICAgcmV0dXJuIGxhdGVzdCh0aGlzW0RSQUZUX1NUQVRFXSkuc2l6ZTtcbiAgICB9XG4gICAgaGFzKGtleSkge1xuICAgICAgcmV0dXJuIGxhdGVzdCh0aGlzW0RSQUZUX1NUQVRFXSkuaGFzKGtleSk7XG4gICAgfVxuICAgIHNldChrZXksIHZhbHVlKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIGlmICghbGF0ZXN0KHN0YXRlKS5oYXMoa2V5KSB8fCBsYXRlc3Qoc3RhdGUpLmdldChrZXkpICE9PSB2YWx1ZSkge1xuICAgICAgICBwcmVwYXJlTWFwQ29weShzdGF0ZSk7XG4gICAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUuYXNzaWduZWRfLnNldChrZXksIHRydWUpO1xuICAgICAgICBzdGF0ZS5jb3B5Xy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgIHN0YXRlLmFzc2lnbmVkXy5zZXQoa2V5LCB0cnVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkZWxldGUoa2V5KSB7XG4gICAgICBpZiAoIXRoaXMuaGFzKGtleSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBwcmVwYXJlTWFwQ29weShzdGF0ZSk7XG4gICAgICBtYXJrQ2hhbmdlZChzdGF0ZSk7XG4gICAgICBpZiAoc3RhdGUuYmFzZV8uaGFzKGtleSkpIHtcbiAgICAgICAgc3RhdGUuYXNzaWduZWRfLnNldChrZXksIGZhbHNlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRlLmFzc2lnbmVkXy5kZWxldGUoa2V5KTtcbiAgICAgIH1cbiAgICAgIHN0YXRlLmNvcHlfLmRlbGV0ZShrZXkpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBpZiAobGF0ZXN0KHN0YXRlKS5zaXplKSB7XG4gICAgICAgIHByZXBhcmVNYXBDb3B5KHN0YXRlKTtcbiAgICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgICBzdGF0ZS5hc3NpZ25lZF8gPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgICBlYWNoKHN0YXRlLmJhc2VfLCAoa2V5KSA9PiB7XG4gICAgICAgICAgc3RhdGUuYXNzaWduZWRfLnNldChrZXksIGZhbHNlKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHN0YXRlLmNvcHlfLmNsZWFyKCk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvckVhY2goY2IsIHRoaXNBcmcpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpc1tEUkFGVF9TVEFURV07XG4gICAgICBsYXRlc3Qoc3RhdGUpLmZvckVhY2goKF92YWx1ZSwga2V5LCBfbWFwKSA9PiB7XG4gICAgICAgIGNiLmNhbGwodGhpc0FyZywgdGhpcy5nZXQoa2V5KSwga2V5LCB0aGlzKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgICBnZXQoa2V5KSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIGNvbnN0IHZhbHVlID0gbGF0ZXN0KHN0YXRlKS5nZXQoa2V5KTtcbiAgICAgIGlmIChzdGF0ZS5maW5hbGl6ZWRfIHx8ICFpc0RyYWZ0YWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuICAgICAgaWYgKHZhbHVlICE9PSBzdGF0ZS5iYXNlXy5nZXQoa2V5KSkge1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG4gICAgICBjb25zdCBkcmFmdCA9IGNyZWF0ZVByb3h5KHZhbHVlLCBzdGF0ZSk7XG4gICAgICBwcmVwYXJlTWFwQ29weShzdGF0ZSk7XG4gICAgICBzdGF0ZS5jb3B5Xy5zZXQoa2V5LCBkcmFmdCk7XG4gICAgICByZXR1cm4gZHJhZnQ7XG4gICAgfVxuICAgIGtleXMoKSB7XG4gICAgICByZXR1cm4gbGF0ZXN0KHRoaXNbRFJBRlRfU1RBVEVdKS5rZXlzKCk7XG4gICAgfVxuICAgIHZhbHVlcygpIHtcbiAgICAgIGNvbnN0IGl0ZXJhdG9yID0gdGhpcy5rZXlzKCk7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBbU3ltYm9sLml0ZXJhdG9yXTogKCkgPT4gdGhpcy52YWx1ZXMoKSxcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHIgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHIuZG9uZSlcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXQoci52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWVcbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBlbnRyaWVzKCkge1xuICAgICAgY29uc3QgaXRlcmF0b3IgPSB0aGlzLmtleXMoKTtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIFtTeW1ib2wuaXRlcmF0b3JdOiAoKSA9PiB0aGlzLmVudHJpZXMoKSxcbiAgICAgICAgbmV4dDogKCkgPT4ge1xuICAgICAgICAgIGNvbnN0IHIgPSBpdGVyYXRvci5uZXh0KCk7XG4gICAgICAgICAgaWYgKHIuZG9uZSlcbiAgICAgICAgICAgIHJldHVybiByO1xuICAgICAgICAgIGNvbnN0IHZhbHVlID0gdGhpcy5nZXQoci52YWx1ZSk7XG4gICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRvbmU6IGZhbHNlLFxuICAgICAgICAgICAgdmFsdWU6IFtyLnZhbHVlLCB2YWx1ZV1cbiAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgICBbKERSQUZUX1NUQVRFLCBTeW1ib2wuaXRlcmF0b3IpXSgpIHtcbiAgICAgIHJldHVybiB0aGlzLmVudHJpZXMoKTtcbiAgICB9XG4gIH1cbiAgZnVuY3Rpb24gcHJveHlNYXBfKHRhcmdldCwgcGFyZW50KSB7XG4gICAgcmV0dXJuIG5ldyBEcmFmdE1hcCh0YXJnZXQsIHBhcmVudCk7XG4gIH1cbiAgZnVuY3Rpb24gcHJlcGFyZU1hcENvcHkoc3RhdGUpIHtcbiAgICBpZiAoIXN0YXRlLmNvcHlfKSB7XG4gICAgICBzdGF0ZS5hc3NpZ25lZF8gPSAvKiBAX19QVVJFX18gKi8gbmV3IE1hcCgpO1xuICAgICAgc3RhdGUuY29weV8gPSBuZXcgTWFwKHN0YXRlLmJhc2VfKTtcbiAgICB9XG4gIH1cbiAgY2xhc3MgRHJhZnRTZXQgZXh0ZW5kcyBTZXQge1xuICAgIGNvbnN0cnVjdG9yKHRhcmdldCwgcGFyZW50KSB7XG4gICAgICBzdXBlcigpO1xuICAgICAgdGhpc1tEUkFGVF9TVEFURV0gPSB7XG4gICAgICAgIHR5cGVfOiAzIC8qIFNldCAqLyxcbiAgICAgICAgcGFyZW50XzogcGFyZW50LFxuICAgICAgICBzY29wZV86IHBhcmVudCA/IHBhcmVudC5zY29wZV8gOiBnZXRDdXJyZW50U2NvcGUoKSxcbiAgICAgICAgbW9kaWZpZWRfOiBmYWxzZSxcbiAgICAgICAgZmluYWxpemVkXzogZmFsc2UsXG4gICAgICAgIGNvcHlfOiB2b2lkIDAsXG4gICAgICAgIGJhc2VfOiB0YXJnZXQsXG4gICAgICAgIGRyYWZ0XzogdGhpcyxcbiAgICAgICAgZHJhZnRzXzogLyogQF9fUFVSRV9fICovIG5ldyBNYXAoKSxcbiAgICAgICAgcmV2b2tlZF86IGZhbHNlLFxuICAgICAgICBpc01hbnVhbF86IGZhbHNlXG4gICAgICB9O1xuICAgIH1cbiAgICBnZXQgc2l6ZSgpIHtcbiAgICAgIHJldHVybiBsYXRlc3QodGhpc1tEUkFGVF9TVEFURV0pLnNpemU7XG4gICAgfVxuICAgIGhhcyh2YWx1ZSkge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBpZiAoIXN0YXRlLmNvcHlfKSB7XG4gICAgICAgIHJldHVybiBzdGF0ZS5iYXNlXy5oYXModmFsdWUpO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXRlLmNvcHlfLmhhcyh2YWx1ZSkpXG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgaWYgKHN0YXRlLmRyYWZ0c18uaGFzKHZhbHVlKSAmJiBzdGF0ZS5jb3B5Xy5oYXMoc3RhdGUuZHJhZnRzXy5nZXQodmFsdWUpKSlcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGFkZCh2YWx1ZSkge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBpZiAoIXRoaXMuaGFzKHZhbHVlKSkge1xuICAgICAgICBwcmVwYXJlU2V0Q29weShzdGF0ZSk7XG4gICAgICAgIG1hcmtDaGFuZ2VkKHN0YXRlKTtcbiAgICAgICAgc3RhdGUuY29weV8uYWRkKHZhbHVlKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkZWxldGUodmFsdWUpIHtcbiAgICAgIGlmICghdGhpcy5oYXModmFsdWUpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpc1tEUkFGVF9TVEFURV07XG4gICAgICBhc3NlcnRVbnJldm9rZWQoc3RhdGUpO1xuICAgICAgcHJlcGFyZVNldENvcHkoc3RhdGUpO1xuICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgcmV0dXJuIHN0YXRlLmNvcHlfLmRlbGV0ZSh2YWx1ZSkgfHwgKHN0YXRlLmRyYWZ0c18uaGFzKHZhbHVlKSA/IHN0YXRlLmNvcHlfLmRlbGV0ZShzdGF0ZS5kcmFmdHNfLmdldCh2YWx1ZSkpIDogKFxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICBmYWxzZVxuICAgICAgKSk7XG4gICAgfVxuICAgIGNsZWFyKCkge1xuICAgICAgY29uc3Qgc3RhdGUgPSB0aGlzW0RSQUZUX1NUQVRFXTtcbiAgICAgIGFzc2VydFVucmV2b2tlZChzdGF0ZSk7XG4gICAgICBpZiAobGF0ZXN0KHN0YXRlKS5zaXplKSB7XG4gICAgICAgIHByZXBhcmVTZXRDb3B5KHN0YXRlKTtcbiAgICAgICAgbWFya0NoYW5nZWQoc3RhdGUpO1xuICAgICAgICBzdGF0ZS5jb3B5Xy5jbGVhcigpO1xuICAgICAgfVxuICAgIH1cbiAgICB2YWx1ZXMoKSB7XG4gICAgICBjb25zdCBzdGF0ZSA9IHRoaXNbRFJBRlRfU1RBVEVdO1xuICAgICAgYXNzZXJ0VW5yZXZva2VkKHN0YXRlKTtcbiAgICAgIHByZXBhcmVTZXRDb3B5KHN0YXRlKTtcbiAgICAgIHJldHVybiBzdGF0ZS5jb3B5Xy52YWx1ZXMoKTtcbiAgICB9XG4gICAgZW50cmllcygpIHtcbiAgICAgIGNvbnN0IHN0YXRlID0gdGhpc1tEUkFGVF9TVEFURV07XG4gICAgICBhc3NlcnRVbnJldm9rZWQoc3RhdGUpO1xuICAgICAgcHJlcGFyZVNldENvcHkoc3RhdGUpO1xuICAgICAgcmV0dXJuIHN0YXRlLmNvcHlfLmVudHJpZXMoKTtcbiAgICB9XG4gICAga2V5cygpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlcygpO1xuICAgIH1cbiAgICBbKERSQUZUX1NUQVRFLCBTeW1ib2wuaXRlcmF0b3IpXSgpIHtcbiAgICAgIHJldHVybiB0aGlzLnZhbHVlcygpO1xuICAgIH1cbiAgICBmb3JFYWNoKGNiLCB0aGlzQXJnKSB7XG4gICAgICBjb25zdCBpdGVyYXRvciA9IHRoaXMudmFsdWVzKCk7XG4gICAgICBsZXQgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgd2hpbGUgKCFyZXN1bHQuZG9uZSkge1xuICAgICAgICBjYi5jYWxsKHRoaXNBcmcsIHJlc3VsdC52YWx1ZSwgcmVzdWx0LnZhbHVlLCB0aGlzKTtcbiAgICAgICAgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBwcm94eVNldF8odGFyZ2V0LCBwYXJlbnQpIHtcbiAgICByZXR1cm4gbmV3IERyYWZ0U2V0KHRhcmdldCwgcGFyZW50KTtcbiAgfVxuICBmdW5jdGlvbiBwcmVwYXJlU2V0Q29weShzdGF0ZSkge1xuICAgIGlmICghc3RhdGUuY29weV8pIHtcbiAgICAgIHN0YXRlLmNvcHlfID0gLyogQF9fUFVSRV9fICovIG5ldyBTZXQoKTtcbiAgICAgIHN0YXRlLmJhc2VfLmZvckVhY2goKHZhbHVlKSA9PiB7XG4gICAgICAgIGlmIChpc0RyYWZ0YWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgICBjb25zdCBkcmFmdCA9IGNyZWF0ZVByb3h5KHZhbHVlLCBzdGF0ZSk7XG4gICAgICAgICAgc3RhdGUuZHJhZnRzXy5zZXQodmFsdWUsIGRyYWZ0KTtcbiAgICAgICAgICBzdGF0ZS5jb3B5Xy5hZGQoZHJhZnQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHN0YXRlLmNvcHlfLmFkZCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBhc3NlcnRVbnJldm9rZWQoc3RhdGUpIHtcbiAgICBpZiAoc3RhdGUucmV2b2tlZF8pXG4gICAgICBkaWUoMywgSlNPTi5zdHJpbmdpZnkobGF0ZXN0KHN0YXRlKSkpO1xuICB9XG4gIGxvYWRQbHVnaW4oXCJNYXBTZXRcIiwgeyBwcm94eU1hcF8sIHByb3h5U2V0XyB9KTtcbn1cblxuLy8gc3JjL2ltbWVyLnRzXG52YXIgaW1tZXIgPSBuZXcgSW1tZXIyKCk7XG52YXIgcHJvZHVjZSA9IGltbWVyLnByb2R1Y2U7XG52YXIgcHJvZHVjZVdpdGhQYXRjaGVzID0gaW1tZXIucHJvZHVjZVdpdGhQYXRjaGVzLmJpbmQoXG4gIGltbWVyXG4pO1xudmFyIHNldEF1dG9GcmVlemUgPSBpbW1lci5zZXRBdXRvRnJlZXplLmJpbmQoaW1tZXIpO1xudmFyIHNldFVzZVN0cmljdFNoYWxsb3dDb3B5ID0gaW1tZXIuc2V0VXNlU3RyaWN0U2hhbGxvd0NvcHkuYmluZChpbW1lcik7XG52YXIgYXBwbHlQYXRjaGVzID0gaW1tZXIuYXBwbHlQYXRjaGVzLmJpbmQoaW1tZXIpO1xudmFyIGNyZWF0ZURyYWZ0ID0gaW1tZXIuY3JlYXRlRHJhZnQuYmluZChpbW1lcik7XG52YXIgZmluaXNoRHJhZnQgPSBpbW1lci5maW5pc2hEcmFmdC5iaW5kKGltbWVyKTtcbmZ1bmN0aW9uIGNhc3REcmFmdCh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5mdW5jdGlvbiBjYXN0SW1tdXRhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cbmV4cG9ydCB7XG4gIEltbWVyMiBhcyBJbW1lcixcbiAgYXBwbHlQYXRjaGVzLFxuICBjYXN0RHJhZnQsXG4gIGNhc3RJbW11dGFibGUsXG4gIGNyZWF0ZURyYWZ0LFxuICBjdXJyZW50LFxuICBlbmFibGVNYXBTZXQsXG4gIGVuYWJsZVBhdGNoZXMsXG4gIGZpbmlzaERyYWZ0LFxuICBmcmVlemUsXG4gIERSQUZUQUJMRSBhcyBpbW1lcmFibGUsXG4gIGlzRHJhZnQsXG4gIGlzRHJhZnRhYmxlLFxuICBOT1RISU5HIGFzIG5vdGhpbmcsXG4gIG9yaWdpbmFsLFxuICBwcm9kdWNlLFxuICBwcm9kdWNlV2l0aFBhdGNoZXMsXG4gIHNldEF1dG9GcmVlemUsXG4gIHNldFVzZVN0cmljdFNoYWxsb3dDb3B5XG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW1tZXIubWpzLm1hcCJdLCJuYW1lcyI6WyJOT1RISU5HIiwiU3ltYm9sIiwiZm9yIiwiRFJBRlRBQkxFIiwiRFJBRlRfU1RBVEUiLCJlcnJvcnMiLCJwcm9jZXNzIiwicGx1Z2luIiwidGhpbmciLCJkYXRhIiwiZGllIiwiZXJyb3IiLCJhcmdzIiwiZSIsIm1zZyIsImFwcGx5IiwiRXJyb3IiLCJnZXRQcm90b3R5cGVPZiIsIk9iamVjdCIsImlzRHJhZnQiLCJ2YWx1ZSIsImlzRHJhZnRhYmxlIiwiaXNQbGFpbk9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImNvbnN0cnVjdG9yIiwiaXNNYXAiLCJpc1NldCIsIm9iamVjdEN0b3JTdHJpbmciLCJwcm90b3R5cGUiLCJ0b1N0cmluZyIsInByb3RvIiwiQ3RvciIsImhhc093blByb3BlcnR5IiwiY2FsbCIsIkZ1bmN0aW9uIiwib3JpZ2luYWwiLCJiYXNlXyIsImVhY2giLCJvYmoiLCJpdGVyIiwiZ2V0QXJjaHR5cGUiLCJSZWZsZWN0Iiwib3duS2V5cyIsImZvckVhY2giLCJrZXkiLCJlbnRyeSIsImluZGV4Iiwic3RhdGUiLCJ0eXBlXyIsImhhcyIsInByb3AiLCJnZXQiLCJzZXQiLCJwcm9wT3JPbGRWYWx1ZSIsInQiLCJhZGQiLCJpcyIsIngiLCJ5IiwidGFyZ2V0IiwiTWFwIiwiU2V0IiwibGF0ZXN0IiwiY29weV8iLCJzaGFsbG93Q29weSIsImJhc2UiLCJzdHJpY3QiLCJzbGljZSIsImlzUGxhaW4iLCJkZXNjcmlwdG9ycyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJrZXlzIiwiaSIsImxlbmd0aCIsImRlc2MiLCJ3cml0YWJsZSIsImNvbmZpZ3VyYWJsZSIsImVudW1lcmFibGUiLCJjcmVhdGUiLCJhc3NpZ24iLCJmcmVlemUiLCJkZWVwIiwiaXNGcm96ZW4iLCJjbGVhciIsImRlbGV0ZSIsImRvbnRNdXRhdGVGcm96ZW5Db2xsZWN0aW9ucyIsImVudHJpZXMiLCJwbHVnaW5zIiwiZ2V0UGx1Z2luIiwicGx1Z2luS2V5IiwibG9hZFBsdWdpbiIsImltcGxlbWVudGF0aW9uIiwiY3VycmVudFNjb3BlIiwiZ2V0Q3VycmVudFNjb3BlIiwiY3JlYXRlU2NvcGUiLCJwYXJlbnRfIiwiaW1tZXJfIiwiZHJhZnRzXyIsImNhbkF1dG9GcmVlemVfIiwidW5maW5hbGl6ZWREcmFmdHNfIiwidXNlUGF0Y2hlc0luU2NvcGUiLCJzY29wZSIsInBhdGNoTGlzdGVuZXIiLCJwYXRjaGVzXyIsImludmVyc2VQYXRjaGVzXyIsInBhdGNoTGlzdGVuZXJfIiwicmV2b2tlU2NvcGUiLCJsZWF2ZVNjb3BlIiwicmV2b2tlRHJhZnQiLCJlbnRlclNjb3BlIiwiaW1tZXIyIiwiZHJhZnQiLCJyZXZva2VfIiwicmV2b2tlZF8iLCJwcm9jZXNzUmVzdWx0IiwicmVzdWx0IiwiYmFzZURyYWZ0IiwiaXNSZXBsYWNlZCIsIm1vZGlmaWVkXyIsImZpbmFsaXplIiwibWF5YmVGcmVlemUiLCJnZW5lcmF0ZVJlcGxhY2VtZW50UGF0Y2hlc18iLCJyb290U2NvcGUiLCJwYXRoIiwiY2hpbGRWYWx1ZSIsImZpbmFsaXplUHJvcGVydHkiLCJzY29wZV8iLCJmaW5hbGl6ZWRfIiwicmVzdWx0RWFjaCIsImlzU2V0MiIsImdlbmVyYXRlUGF0Y2hlc18iLCJwYXJlbnRTdGF0ZSIsInRhcmdldE9iamVjdCIsInJvb3RQYXRoIiwidGFyZ2V0SXNTZXQiLCJhc3NpZ25lZF8iLCJjb25jYXQiLCJyZXMiLCJhdXRvRnJlZXplXyIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwiY3JlYXRlUHJveHlQcm94eSIsInBhcmVudCIsImRyYWZ0XyIsImlzTWFudWFsXyIsInRyYXBzIiwib2JqZWN0VHJhcHMiLCJhcnJheVRyYXBzIiwicmV2b2tlIiwicHJveHkiLCJQcm94eSIsInJldm9jYWJsZSIsInNvdXJjZSIsInJlYWRQcm9wRnJvbVByb3RvIiwicGVlayIsInByZXBhcmVDb3B5IiwiY3JlYXRlUHJveHkiLCJnZXREZXNjcmlwdG9yRnJvbVByb3RvIiwiY3VycmVudDIiLCJjdXJyZW50U3RhdGUiLCJtYXJrQ2hhbmdlZCIsIk51bWJlciIsImlzTmFOIiwiZGVsZXRlUHJvcGVydHkiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJvd25lciIsImRlZmluZVByb3BlcnR5Iiwic2V0UHJvdG90eXBlT2YiLCJmbiIsImFyZ3VtZW50cyIsInBhcnNlSW50IiwidXNlU3RyaWN0U2hhbGxvd0NvcHlfIiwiSW1tZXIyIiwiY29uZmlnIiwicHJvZHVjZSIsInJlY2lwZSIsImRlZmF1bHRCYXNlIiwic2VsZiIsImN1cnJpZWRQcm9kdWNlIiwiYmFzZTIiLCJoYXNFcnJvciIsInAiLCJpcCIsInByb2R1Y2VXaXRoUGF0Y2hlcyIsInBhdGNoZXMiLCJpbnZlcnNlUGF0Y2hlcyIsImF1dG9GcmVlemUiLCJzZXRBdXRvRnJlZXplIiwidXNlU3RyaWN0U2hhbGxvd0NvcHkiLCJzZXRVc2VTdHJpY3RTaGFsbG93Q29weSIsImNyZWF0ZURyYWZ0IiwiY3VycmVudCIsImZpbmlzaERyYWZ0IiwiYXBwbHlQYXRjaGVzIiwicGF0Y2giLCJvcCIsImFwcGx5UGF0Y2hlc0ltcGwiLCJhcHBseVBhdGNoZXNfIiwicHJveHlNYXBfIiwicHJveHlTZXRfIiwicHVzaCIsImN1cnJlbnRJbXBsIiwiY29weSIsImVuYWJsZVBhdGNoZXMiLCJlcnJvck9mZnNldCIsIlJFUExBQ0UiLCJBREQiLCJSRU1PVkUiLCJiYXNlUGF0aCIsImdlbmVyYXRlUGF0Y2hlc0Zyb21Bc3NpZ25lZCIsImdlbmVyYXRlQXJyYXlQYXRjaGVzIiwiZ2VuZXJhdGVTZXRQYXRjaGVzIiwiY2xvbmVQYXRjaFZhbHVlSWZOZWVkZWQiLCJhc3NpZ25lZFZhbHVlIiwib3JpZ1ZhbHVlIiwidW5zaGlmdCIsImJhc2VWYWx1ZSIsInJlcGxhY2VtZW50IiwicGFyZW50VHlwZSIsImpvaW4iLCJ0eXBlIiwiZGVlcENsb25lUGF0Y2hWYWx1ZSIsInNwbGljZSIsIm1hcCIsImZyb20iLCJrIiwidiIsImNsb25lZCIsImVuYWJsZU1hcFNldCIsIkRyYWZ0TWFwIiwic2l6ZSIsImFzc2VydFVucmV2b2tlZCIsInByZXBhcmVNYXBDb3B5IiwiY2IiLCJ0aGlzQXJnIiwiX3ZhbHVlIiwiX21hcCIsInZhbHVlcyIsIml0ZXJhdG9yIiwibmV4dCIsInIiLCJkb25lIiwiRHJhZnRTZXQiLCJwcmVwYXJlU2V0Q29weSIsIkpTT04iLCJzdHJpbmdpZnkiLCJpbW1lciIsImJpbmQiLCJjYXN0RHJhZnQiLCJjYXN0SW1tdXRhYmxlIiwiSW1tZXIiLCJpbW1lcmFibGUiLCJub3RoaW5nIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../node_modules/immer/dist/immer.mjs\n");

/***/ })

};
;